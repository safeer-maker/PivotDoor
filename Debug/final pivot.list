
final pivot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dcc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003f5c  08003f5c  00013f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fd4  08003fd4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003fd4  08003fd4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fd4  08003fd4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fd4  08003fd4  00013fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fd8  08003fd8  00013fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000003b4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000424  20000424  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d6d2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cbc  00000000  00000000  0002d772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f0  00000000  00000000  0002f430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000848  00000000  00000000  0002fd20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cd22  00000000  00000000  00030568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000be92  00000000  00000000  0004d28a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aee1f  00000000  00000000  0005911c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00107f3b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027a0  00000000  00000000  00107f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003f44 	.word	0x08003f44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003f44 	.word	0x08003f44

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fe7d 	bl	8000f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f839 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 f8e9 	bl	8000454 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000282:	f000 f8c5 	bl	8000410 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 8000286:	f000 f893 	bl	80003b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
initial_system_state();
 800028a:	f000 faf5 	bl	8000878 <initial_system_state>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOD, remained_open_Pin))
 800028e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000292:	4816      	ldr	r0, [pc, #88]	; (80002ec <main+0x7c>)
 8000294:	f001 f958 	bl	8001548 <HAL_GPIO_ReadPin>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <main+0x32>
	  {
       remained_open();
 800029e:	f000 fc4f 	bl	8000b40 <remained_open>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t select_switch =select_system();           // Selection between motion sensor and wind sensor
 80002a2:	f000 fb1d 	bl	80008e0 <select_system>
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]

	 switch(select_switch)
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d002      	beq.n	80002b6 <main+0x46>
 80002b0:	2b02      	cmp	r3, #2
 80002b2:	d004      	beq.n	80002be <main+0x4e>
 80002b4:	e019      	b.n	80002ea <main+0x7a>
	 {
	 case 1:

		 	 	 normal_state(0);
 80002b6:	2000      	movs	r0, #0
 80002b8:	f000 fb2a 	bl	8000910 <normal_state>
		 		  break;
 80002bc:	e015      	b.n	80002ea <main+0x7a>

	 case 2:
		 if(wind_sensor_state())
 80002be:	f000 facb 	bl	8000858 <wind_sensor_state>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d00c      	beq.n	80002e2 <main+0x72>
		 {
			 if(!manager_auth()){
 80002c8:	f000 fc96 	bl	8000bf8 <manager_auth>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d107      	bne.n	80002e2 <main+0x72>
			 emergency_close();
 80002d2:	f000 fbf7 	bl	8000ac4 <emergency_close>
			 while(!manager_auth());
 80002d6:	bf00      	nop
 80002d8:	f000 fc8e 	bl	8000bf8 <manager_auth>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d0fa      	beq.n	80002d8 <main+0x68>
			 }
		 }
		 normal_state(1);
 80002e2:	2001      	movs	r0, #1
 80002e4:	f000 fb14 	bl	8000910 <normal_state>

		  break;
 80002e8:	bf00      	nop
  {
 80002ea:	e7d0      	b.n	800028e <main+0x1e>
 80002ec:	48000c00 	.word	0x48000c00

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b09e      	sub	sp, #120	; 0x78
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002fa:	2228      	movs	r2, #40	; 0x28
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f003 f9ea 	bl	80036d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	605a      	str	r2, [r3, #4]
 800030e:	609a      	str	r2, [r3, #8]
 8000310:	60da      	str	r2, [r3, #12]
 8000312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000314:	463b      	mov	r3, r7
 8000316:	223c      	movs	r2, #60	; 0x3c
 8000318:	2100      	movs	r1, #0
 800031a:	4618      	mov	r0, r3
 800031c:	f003 f9dc 	bl	80036d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000320:	2301      	movs	r3, #1
 8000322:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000324:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000328:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032e:	2301      	movs	r3, #1
 8000330:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000332:	2302      	movs	r3, #2
 8000334:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000336:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800033a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800033c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000340:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000342:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000346:	4618      	mov	r0, r3
 8000348:	f001 fa0c 	bl	8001764 <HAL_RCC_OscConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000352:	f000 fcc1 	bl	8000cd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000356:	230f      	movs	r3, #15
 8000358:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800035a:	2302      	movs	r3, #2
 800035c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000366:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800036c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000370:	2101      	movs	r1, #1
 8000372:	4618      	mov	r0, r3
 8000374:	f002 f8fe 	bl	8002574 <HAL_RCC_ClockConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800037e:	f000 fcab 	bl	8000cd8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <SystemClock_Config+0xbc>)
 8000384:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000386:	2300      	movs	r3, #0
 8000388:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800038a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800038e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000390:	463b      	mov	r3, r7
 8000392:	4618      	mov	r0, r3
 8000394:	f002 fb24 	bl	80029e0 <HAL_RCCEx_PeriphCLKConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800039e:	f000 fc9b 	bl	8000cd8 <Error_Handler>
  }
}
 80003a2:	bf00      	nop
 80003a4:	3778      	adds	r7, #120	; 0x78
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	00020001 	.word	0x00020001

080003b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003b4:	4b14      	ldr	r3, [pc, #80]	; (8000408 <MX_USART1_UART_Init+0x58>)
 80003b6:	4a15      	ldr	r2, [pc, #84]	; (800040c <MX_USART1_UART_Init+0x5c>)
 80003b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80003ba:	4b13      	ldr	r3, [pc, #76]	; (8000408 <MX_USART1_UART_Init+0x58>)
 80003bc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <MX_USART1_UART_Init+0x58>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <MX_USART1_UART_Init+0x58>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <MX_USART1_UART_Init+0x58>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <MX_USART1_UART_Init+0x58>)
 80003d6:	220c      	movs	r2, #12
 80003d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <MX_USART1_UART_Init+0x58>)
 80003dc:	2200      	movs	r2, #0
 80003de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e0:	4b09      	ldr	r3, [pc, #36]	; (8000408 <MX_USART1_UART_Init+0x58>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003e6:	4b08      	ldr	r3, [pc, #32]	; (8000408 <MX_USART1_UART_Init+0x58>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <MX_USART1_UART_Init+0x58>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003f2:	4805      	ldr	r0, [pc, #20]	; (8000408 <MX_USART1_UART_Init+0x58>)
 80003f4:	f002 fca4 	bl	8002d40 <HAL_UART_Init>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003fe:	f000 fc6b 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	20000098 	.word	0x20000098
 800040c:	40013800 	.word	0x40013800

08000410 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000414:	4b0d      	ldr	r3, [pc, #52]	; (800044c <MX_USB_PCD_Init+0x3c>)
 8000416:	4a0e      	ldr	r2, [pc, #56]	; (8000450 <MX_USB_PCD_Init+0x40>)
 8000418:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800041a:	4b0c      	ldr	r3, [pc, #48]	; (800044c <MX_USB_PCD_Init+0x3c>)
 800041c:	2208      	movs	r2, #8
 800041e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000420:	4b0a      	ldr	r3, [pc, #40]	; (800044c <MX_USB_PCD_Init+0x3c>)
 8000422:	2202      	movs	r2, #2
 8000424:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000426:	4b09      	ldr	r3, [pc, #36]	; (800044c <MX_USB_PCD_Init+0x3c>)
 8000428:	2202      	movs	r2, #2
 800042a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800042c:	4b07      	ldr	r3, [pc, #28]	; (800044c <MX_USB_PCD_Init+0x3c>)
 800042e:	2200      	movs	r2, #0
 8000430:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <MX_USB_PCD_Init+0x3c>)
 8000434:	2200      	movs	r2, #0
 8000436:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000438:	4804      	ldr	r0, [pc, #16]	; (800044c <MX_USB_PCD_Init+0x3c>)
 800043a:	f001 f8b5 	bl	80015a8 <HAL_PCD_Init>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000444:	f000 fc48 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000448:	bf00      	nop
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20000124 	.word	0x20000124
 8000450:	40005c00 	.word	0x40005c00

08000454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b08c      	sub	sp, #48	; 0x30
 8000458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045a:	f107 031c 	add.w	r3, r7, #28
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	605a      	str	r2, [r3, #4]
 8000464:	609a      	str	r2, [r3, #8]
 8000466:	60da      	str	r2, [r3, #12]
 8000468:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800046a:	4b93      	ldr	r3, [pc, #588]	; (80006b8 <MX_GPIO_Init+0x264>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	4a92      	ldr	r2, [pc, #584]	; (80006b8 <MX_GPIO_Init+0x264>)
 8000470:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000474:	6153      	str	r3, [r2, #20]
 8000476:	4b90      	ldr	r3, [pc, #576]	; (80006b8 <MX_GPIO_Init+0x264>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800047e:	61bb      	str	r3, [r7, #24]
 8000480:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000482:	4b8d      	ldr	r3, [pc, #564]	; (80006b8 <MX_GPIO_Init+0x264>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a8c      	ldr	r2, [pc, #560]	; (80006b8 <MX_GPIO_Init+0x264>)
 8000488:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800048c:	6153      	str	r3, [r2, #20]
 800048e:	4b8a      	ldr	r3, [pc, #552]	; (80006b8 <MX_GPIO_Init+0x264>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000496:	617b      	str	r3, [r7, #20]
 8000498:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800049a:	4b87      	ldr	r3, [pc, #540]	; (80006b8 <MX_GPIO_Init+0x264>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	4a86      	ldr	r2, [pc, #536]	; (80006b8 <MX_GPIO_Init+0x264>)
 80004a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004a4:	6153      	str	r3, [r2, #20]
 80004a6:	4b84      	ldr	r3, [pc, #528]	; (80006b8 <MX_GPIO_Init+0x264>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b2:	4b81      	ldr	r3, [pc, #516]	; (80006b8 <MX_GPIO_Init+0x264>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	4a80      	ldr	r2, [pc, #512]	; (80006b8 <MX_GPIO_Init+0x264>)
 80004b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004bc:	6153      	str	r3, [r2, #20]
 80004be:	4b7e      	ldr	r3, [pc, #504]	; (80006b8 <MX_GPIO_Init+0x264>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ca:	4b7b      	ldr	r3, [pc, #492]	; (80006b8 <MX_GPIO_Init+0x264>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a7a      	ldr	r2, [pc, #488]	; (80006b8 <MX_GPIO_Init+0x264>)
 80004d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004d4:	6153      	str	r3, [r2, #20]
 80004d6:	4b78      	ldr	r3, [pc, #480]	; (80006b8 <MX_GPIO_Init+0x264>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004e2:	4b75      	ldr	r3, [pc, #468]	; (80006b8 <MX_GPIO_Init+0x264>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	4a74      	ldr	r2, [pc, #464]	; (80006b8 <MX_GPIO_Init+0x264>)
 80004e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004ec:	6153      	str	r3, [r2, #20]
 80004ee:	4b72      	ldr	r3, [pc, #456]	; (80006b8 <MX_GPIO_Init+0x264>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004fa:	2200      	movs	r2, #0
 80004fc:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000500:	486e      	ldr	r0, [pc, #440]	; (80006bc <MX_GPIO_Init+0x268>)
 8000502:	f001 f839 	bl	8001578 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, direction_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 800050c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000510:	f001 f832 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(brake_GPIO_Port, brake_Pin, GPIO_PIN_SET);
 8000514:	2201      	movs	r2, #1
 8000516:	2110      	movs	r1, #16
 8000518:	4869      	ldr	r0, [pc, #420]	; (80006c0 <MX_GPIO_Init+0x26c>)
 800051a:	f001 f82d 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, linear_actuator1_Pin|linear_actuator2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000524:	4867      	ldr	r0, [pc, #412]	; (80006c4 <MX_GPIO_Init+0x270>)
 8000526:	f001 f827 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin;
 800052a:	2317      	movs	r3, #23
 800052c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800052e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000532:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000538:	f107 031c 	add.w	r3, r7, #28
 800053c:	4619      	mov	r1, r3
 800053e:	485f      	ldr	r0, [pc, #380]	; (80006bc <MX_GPIO_Init+0x268>)
 8000540:	f000 fe88 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000544:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000548:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054a:	2301      	movs	r3, #1
 800054c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	2300      	movs	r3, #0
 8000554:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000556:	f107 031c 	add.w	r3, r7, #28
 800055a:	4619      	mov	r1, r3
 800055c:	4857      	ldr	r0, [pc, #348]	; (80006bc <MX_GPIO_Init+0x268>)
 800055e:	f000 fe79 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000562:	2301      	movs	r3, #1
 8000564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000566:	2300      	movs	r3, #0
 8000568:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	4619      	mov	r1, r3
 8000574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000578:	f000 fe6c 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : manager_button_Pin select_switch_Pin */
  GPIO_InitStruct.Pin = manager_button_Pin|select_switch_Pin;
 800057c:	2306      	movs	r3, #6
 800057e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000580:	2300      	movs	r3, #0
 8000582:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000584:	2302      	movs	r3, #2
 8000586:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	f107 031c 	add.w	r3, r7, #28
 800058c:	4619      	mov	r1, r3
 800058e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000592:	f000 fe5f 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : direction_Pin PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = direction_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000596:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800059a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059c:	2301      	movs	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a4:	2300      	movs	r3, #0
 80005a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a8:	f107 031c 	add.w	r3, r7, #28
 80005ac:	4619      	mov	r1, r3
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b2:	f000 fe4f 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : brake_Pin */
  GPIO_InitStruct.Pin = brake_Pin;
 80005b6:	2310      	movs	r3, #16
 80005b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c2:	2300      	movs	r3, #0
 80005c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(brake_GPIO_Port, &GPIO_InitStruct);
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	4619      	mov	r1, r3
 80005cc:	483c      	ldr	r0, [pc, #240]	; (80006c0 <MX_GPIO_Init+0x26c>)
 80005ce:	f000 fe41 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80005d2:	23e0      	movs	r3, #224	; 0xe0
 80005d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d6:	2302      	movs	r3, #2
 80005d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005de:	2303      	movs	r3, #3
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80005e2:	2305      	movs	r3, #5
 80005e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	4619      	mov	r1, r3
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f0:	f000 fe30 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : proximity_sensor_Pin */
  GPIO_InitStruct.Pin = proximity_sensor_Pin;
 80005f4:	2302      	movs	r3, #2
 80005f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f8:	2300      	movs	r3, #0
 80005fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005fc:	2301      	movs	r3, #1
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 8000600:	f107 031c 	add.w	r3, r7, #28
 8000604:	4619      	mov	r1, r3
 8000606:	4830      	ldr	r0, [pc, #192]	; (80006c8 <MX_GPIO_Init+0x274>)
 8000608:	f000 fe24 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : limit_switch_Pin motion_sensor_Pin wind_sensor_Pin */
  GPIO_InitStruct.Pin = limit_switch_Pin|motion_sensor_Pin|wind_sensor_Pin;
 800060c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000612:	2300      	movs	r3, #0
 8000614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000616:	2302      	movs	r3, #2
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	4619      	mov	r1, r3
 8000620:	4829      	ldr	r0, [pc, #164]	; (80006c8 <MX_GPIO_Init+0x274>)
 8000622:	f000 fe17 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : remained_open_Pin PD6 */
  GPIO_InitStruct.Pin = remained_open_Pin|GPIO_PIN_6;
 8000626:	f244 0340 	movw	r3, #16448	; 0x4040
 800062a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062c:	2300      	movs	r3, #0
 800062e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000630:	2302      	movs	r3, #2
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4619      	mov	r1, r3
 800063a:	4824      	ldr	r0, [pc, #144]	; (80006cc <MX_GPIO_Init+0x278>)
 800063c:	f000 fe0a 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : closing_motion_sensor_Pin */
  GPIO_InitStruct.Pin = closing_motion_sensor_Pin;
 8000640:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000646:	2300      	movs	r3, #0
 8000648:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800064a:	2301      	movs	r3, #1
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(closing_motion_sensor_GPIO_Port, &GPIO_InitStruct);
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	4619      	mov	r1, r3
 8000654:	481d      	ldr	r0, [pc, #116]	; (80006cc <MX_GPIO_Init+0x278>)
 8000656:	f000 fdfd 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : linear_actuator1_Pin linear_actuator2_Pin PC8 PC9 */
  GPIO_InitStruct.Pin = linear_actuator1_Pin|linear_actuator2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 800065a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800065e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	2301      	movs	r3, #1
 8000662:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2300      	movs	r3, #0
 800066a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4619      	mov	r1, r3
 8000672:	4814      	ldr	r0, [pc, #80]	; (80006c4 <MX_GPIO_Init+0x270>)
 8000674:	f000 fdee 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000678:	2320      	movs	r3, #32
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067c:	2300      	movs	r3, #0
 800067e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4619      	mov	r1, r3
 800068a:	4810      	ldr	r0, [pc, #64]	; (80006cc <MX_GPIO_Init+0x278>)
 800068c:	f000 fde2 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000690:	23c0      	movs	r3, #192	; 0xc0
 8000692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000694:	2312      	movs	r3, #18
 8000696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000698:	2301      	movs	r3, #1
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069c:	2303      	movs	r3, #3
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006a0:	2304      	movs	r3, #4
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	4619      	mov	r1, r3
 80006aa:	4807      	ldr	r0, [pc, #28]	; (80006c8 <MX_GPIO_Init+0x274>)
 80006ac:	f000 fdd2 	bl	8001254 <HAL_GPIO_Init>

}
 80006b0:	bf00      	nop
 80006b2:	3730      	adds	r7, #48	; 0x30
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000
 80006bc:	48001000 	.word	0x48001000
 80006c0:	48001400 	.word	0x48001400
 80006c4:	48000800 	.word	0x48000800
 80006c8:	48000400 	.word	0x48000400
 80006cc:	48000c00 	.word	0x48000c00

080006d0 <person_present>:

/* USER CODE BEGIN 4 */

uint8_t person_present(uint8_t side)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]

	HAL_Delay(20);
 80006da:	2014      	movs	r0, #20
 80006dc:	f000 fcb0 	bl	8001040 <HAL_Delay>
	if(side == 'F')
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	2b46      	cmp	r3, #70	; 0x46
 80006e4:	d106      	bne.n	80006f4 <person_present+0x24>
		return HAL_GPIO_ReadPin(GPIOB, motion_sensor_Pin);
 80006e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ea:	480c      	ldr	r0, [pc, #48]	; (800071c <person_present+0x4c>)
 80006ec:	f000 ff2c 	bl	8001548 <HAL_GPIO_ReadPin>
 80006f0:	4603      	mov	r3, r0
 80006f2:	e00e      	b.n	8000712 <person_present+0x42>
	else if(side == 'B')
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b42      	cmp	r3, #66	; 0x42
 80006f8:	d10b      	bne.n	8000712 <person_present+0x42>
		return !HAL_GPIO_ReadPin(GPIOD, closing_motion_sensor_Pin);
 80006fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006fe:	4808      	ldr	r0, [pc, #32]	; (8000720 <person_present+0x50>)
 8000700:	f000 ff22 	bl	8001548 <HAL_GPIO_ReadPin>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	bf0c      	ite	eq
 800070a:	2301      	moveq	r3, #1
 800070c:	2300      	movne	r3, #0
 800070e:	b2db      	uxtb	r3, r3
 8000710:	e7ff      	b.n	8000712 <person_present+0x42>
}
 8000712:	4618      	mov	r0, r3
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	48000400 	.word	0x48000400
 8000720:	48000c00 	.word	0x48000c00

08000724 <move_actuator>:




void move_actuator(uint8_t state){
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	if(state == 'L'){
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b4c      	cmp	r3, #76	; 0x4c
 8000732:	d110      	bne.n	8000756 <move_actuator+0x32>
		HAL_GPIO_WritePin(GPIOC, linear_actuator1_Pin, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2140      	movs	r1, #64	; 0x40
 8000738:	481c      	ldr	r0, [pc, #112]	; (80007ac <move_actuator+0x88>)
 800073a:	f000 ff1d 	bl	8001578 <HAL_GPIO_WritePin>
		HAL_Delay(20);
 800073e:	2014      	movs	r0, #20
 8000740:	f000 fc7e 	bl	8001040 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, linear_actuator2_Pin, GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	2180      	movs	r1, #128	; 0x80
 8000748:	4818      	ldr	r0, [pc, #96]	; (80007ac <move_actuator+0x88>)
 800074a:	f000 ff15 	bl	8001578 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 800074e:	2032      	movs	r0, #50	; 0x32
 8000750:	f000 fc76 	bl	8001040 <HAL_Delay>
		HAL_Delay(20);
		HAL_GPIO_WritePin(GPIOC, linear_actuator1_Pin, GPIO_PIN_RESET);
		HAL_Delay(50);
	}

}
 8000754:	e026      	b.n	80007a4 <move_actuator+0x80>
	else if(state == 'U'){
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2b55      	cmp	r3, #85	; 0x55
 800075a:	d110      	bne.n	800077e <move_actuator+0x5a>
		HAL_GPIO_WritePin(GPIOC, linear_actuator2_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2180      	movs	r1, #128	; 0x80
 8000760:	4812      	ldr	r0, [pc, #72]	; (80007ac <move_actuator+0x88>)
 8000762:	f000 ff09 	bl	8001578 <HAL_GPIO_WritePin>
		HAL_Delay(20);
 8000766:	2014      	movs	r0, #20
 8000768:	f000 fc6a 	bl	8001040 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, linear_actuator1_Pin, GPIO_PIN_SET);
 800076c:	2201      	movs	r2, #1
 800076e:	2140      	movs	r1, #64	; 0x40
 8000770:	480e      	ldr	r0, [pc, #56]	; (80007ac <move_actuator+0x88>)
 8000772:	f000 ff01 	bl	8001578 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000776:	2032      	movs	r0, #50	; 0x32
 8000778:	f000 fc62 	bl	8001040 <HAL_Delay>
}
 800077c:	e012      	b.n	80007a4 <move_actuator+0x80>
	else if(state == 'S'){
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b53      	cmp	r3, #83	; 0x53
 8000782:	d10f      	bne.n	80007a4 <move_actuator+0x80>
		HAL_GPIO_WritePin(GPIOC, linear_actuator2_Pin, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2180      	movs	r1, #128	; 0x80
 8000788:	4808      	ldr	r0, [pc, #32]	; (80007ac <move_actuator+0x88>)
 800078a:	f000 fef5 	bl	8001578 <HAL_GPIO_WritePin>
		HAL_Delay(20);
 800078e:	2014      	movs	r0, #20
 8000790:	f000 fc56 	bl	8001040 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, linear_actuator1_Pin, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2140      	movs	r1, #64	; 0x40
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <move_actuator+0x88>)
 800079a:	f000 feed 	bl	8001578 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 800079e:	2032      	movs	r0, #50	; 0x32
 80007a0:	f000 fc4e 	bl	8001040 <HAL_Delay>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	48000800 	.word	0x48000800

080007b0 <actuator_state>:
uint8_t actuator_state(void){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

	HAL_Delay(20);
 80007b4:	2014      	movs	r0, #20
 80007b6:	f000 fc43 	bl	8001040 <HAL_Delay>
	return HAL_GPIO_ReadPin(GPIOB, proximity_sensor_Pin);
 80007ba:	2102      	movs	r1, #2
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <actuator_state+0x18>)
 80007be:	f000 fec3 	bl	8001548 <HAL_GPIO_ReadPin>
 80007c2:	4603      	mov	r3, r0

}
 80007c4:	4618      	mov	r0, r3
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	48000400 	.word	0x48000400

080007cc <door_state>:
uint8_t door_state(void){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0


	HAL_Delay(20);
 80007d0:	2014      	movs	r0, #20
 80007d2:	f000 fc35 	bl	8001040 <HAL_Delay>
	return HAL_GPIO_ReadPin(GPIOB, limit_switch_Pin);
 80007d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007da:	4803      	ldr	r0, [pc, #12]	; (80007e8 <door_state+0x1c>)
 80007dc:	f000 feb4 	bl	8001548 <HAL_GPIO_ReadPin>
 80007e0:	4603      	mov	r3, r0

}
 80007e2:	4618      	mov	r0, r3
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	48000400 	.word	0x48000400

080007ec <direction>:
void direction(uint8_t dir){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
	if(dir == 'C')
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b43      	cmp	r3, #67	; 0x43
 80007fa:	d106      	bne.n	800080a <direction+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2108      	movs	r1, #8
 8000800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000804:	f000 feb8 	bl	8001578 <HAL_GPIO_WritePin>
	else if(dir == 'O')
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,GPIO_PIN_SET );

}
 8000808:	e008      	b.n	800081c <direction+0x30>
	else if(dir == 'O')
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2b4f      	cmp	r3, #79	; 0x4f
 800080e:	d105      	bne.n	800081c <direction+0x30>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3,GPIO_PIN_SET );
 8000810:	2201      	movs	r2, #1
 8000812:	2108      	movs	r1, #8
 8000814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000818:	f000 feae 	bl	8001578 <HAL_GPIO_WritePin>
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <brake>:

void brake(uint8_t state){
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]

	if(state)
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d005      	beq.n	8000840 <brake+0x1c>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	2110      	movs	r1, #16
 8000838:	4806      	ldr	r0, [pc, #24]	; (8000854 <brake+0x30>)
 800083a:	f000 fe9d 	bl	8001578 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);


}
 800083e:	e004      	b.n	800084a <brake+0x26>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	2110      	movs	r1, #16
 8000844:	4803      	ldr	r0, [pc, #12]	; (8000854 <brake+0x30>)
 8000846:	f000 fe97 	bl	8001578 <HAL_GPIO_WritePin>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	48001400 	.word	0x48001400

08000858 <wind_sensor_state>:
uint8_t wind_sensor_state(void){
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0

	HAL_Delay(10);
 800085c:	200a      	movs	r0, #10
 800085e:	f000 fbef 	bl	8001040 <HAL_Delay>
	return HAL_GPIO_ReadPin(GPIOB, wind_sensor_Pin);
 8000862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000866:	4803      	ldr	r0, [pc, #12]	; (8000874 <wind_sensor_state+0x1c>)
 8000868:	f000 fe6e 	bl	8001548 <HAL_GPIO_ReadPin>
 800086c:	4603      	mov	r3, r0


}
 800086e:	4618      	mov	r0, r3
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	48000400 	.word	0x48000400

08000878 <initial_system_state>:


void initial_system_state(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	  brake(1);  // Break while door opening
 800087c:	2001      	movs	r0, #1
 800087e:	f7ff ffd1 	bl	8000824 <brake>
	  HAL_Delay(50);
 8000882:	2032      	movs	r0, #50	; 0x32
 8000884:	f000 fbdc 	bl	8001040 <HAL_Delay>

	 direction('C');
 8000888:	2043      	movs	r0, #67	; 0x43
 800088a:	f7ff ffaf 	bl	80007ec <direction>
	  HAL_Delay(20);
 800088e:	2014      	movs	r0, #20
 8000890:	f000 fbd6 	bl	8001040 <HAL_Delay>
	  brake(0);
 8000894:	2000      	movs	r0, #0
 8000896:	f7ff ffc5 	bl	8000824 <brake>
	  HAL_Delay(20);
 800089a:	2014      	movs	r0, #20
 800089c:	f000 fbd0 	bl	8001040 <HAL_Delay>

   	  while(!door_state()){
 80008a0:	e002      	b.n	80008a8 <initial_system_state+0x30>
		HAL_Delay(10);
 80008a2:	200a      	movs	r0, #10
 80008a4:	f000 fbcc 	bl	8001040 <HAL_Delay>
   	  while(!door_state()){
 80008a8:	f7ff ff90 	bl	80007cc <door_state>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d0f7      	beq.n	80008a2 <initial_system_state+0x2a>
	  }
	brake(1);
 80008b2:	2001      	movs	r0, #1
 80008b4:	f7ff ffb6 	bl	8000824 <brake>
	HAL_Delay(20);
 80008b8:	2014      	movs	r0, #20
 80008ba:	f000 fbc1 	bl	8001040 <HAL_Delay>
	move_actuator('L');
 80008be:	204c      	movs	r0, #76	; 0x4c
 80008c0:	f7ff ff30 	bl	8000724 <move_actuator>
	while(!actuator_state()){
 80008c4:	e002      	b.n	80008cc <initial_system_state+0x54>
		HAL_Delay(10);
 80008c6:	200a      	movs	r0, #10
 80008c8:	f000 fbba 	bl	8001040 <HAL_Delay>
	while(!actuator_state()){
 80008cc:	f7ff ff70 	bl	80007b0 <actuator_state>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d0f7      	beq.n	80008c6 <initial_system_state+0x4e>
		}
	move_actuator('S');
 80008d6:	2053      	movs	r0, #83	; 0x53
 80008d8:	f7ff ff24 	bl	8000724 <move_actuator>


}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}

080008e0 <select_system>:

uint8_t select_system(void){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
	HAL_Delay(10);
 80008e6:	200a      	movs	r0, #10
 80008e8:	f000 fbaa 	bl	8001040 <HAL_Delay>
	uint8_t system_state = HAL_GPIO_ReadPin(GPIOA, select_switch_Pin);
 80008ec:	2104      	movs	r1, #4
 80008ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f2:	f000 fe29 	bl	8001548 <HAL_GPIO_ReadPin>
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]

	if(system_state)
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <select_system+0x24>
		return 2;
 8000900:	2302      	movs	r3, #2
 8000902:	e000      	b.n	8000906 <select_system+0x26>
	else
		return 1;
 8000904:	2301      	movs	r3, #1

}
 8000906:	4618      	mov	r0, r3
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <normal_state>:



void normal_state(uint8_t override)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
 	while(!HAL_GPIO_ReadPin(GPIOD, remained_open_Pin))
 800091a:	e0c3      	b.n	8000aa4 <normal_state+0x194>
	{

	if(person_present('F') && (!HAL_GPIO_ReadPin (GPIOD, GPIO_PIN_6)))
 800091c:	2046      	movs	r0, #70	; 0x46
 800091e:	f7ff fed7 	bl	80006d0 <person_present>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d062      	beq.n	80009ee <normal_state+0xde>
 8000928:	2140      	movs	r1, #64	; 0x40
 800092a:	4865      	ldr	r0, [pc, #404]	; (8000ac0 <normal_state+0x1b0>)
 800092c:	f000 fe0c 	bl	8001548 <HAL_GPIO_ReadPin>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d15b      	bne.n	80009ee <normal_state+0xde>
			 	 	 {
			 	 		 if(actuator_state())
 8000936:	f7ff ff3b 	bl	80007b0 <actuator_state>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d00e      	beq.n	800095e <normal_state+0x4e>
			 	 		 {
			 	 			 move_actuator('U');
 8000940:	2055      	movs	r0, #85	; 0x55
 8000942:	f7ff feef 	bl	8000724 <move_actuator>
 			 	 			 while(actuator_state())
 8000946:	e002      	b.n	800094e <normal_state+0x3e>
			 	 			 {
			 	 				 HAL_Delay(20);
 8000948:	2014      	movs	r0, #20
 800094a:	f000 fb79 	bl	8001040 <HAL_Delay>
 			 	 			 while(actuator_state())
 800094e:	f7ff ff2f 	bl	80007b0 <actuator_state>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1f7      	bne.n	8000948 <normal_state+0x38>
			 	 			 }
			 	 			 move_actuator('S');
 8000958:	2053      	movs	r0, #83	; 0x53
 800095a:	f7ff fee3 	bl	8000724 <move_actuator>
			 	 		 }
			 	 		/* direction('O');
			 	 		 brake(0);
			 	 		 HAL_Delay(17000);
  			 	 		 brake(1);*/
			 	 		 move_motor('O',90);
 800095e:	215a      	movs	r1, #90	; 0x5a
 8000960:	204f      	movs	r0, #79	; 0x4f
 8000962:	f000 f957 	bl	8000c14 <move_motor>
			 	 		 HAL_Delay(5000);
 8000966:	f241 3088 	movw	r0, #5000	; 0x1388
 800096a:	f000 fb69 	bl	8001040 <HAL_Delay>
			 	 		 direction('C');
 800096e:	2043      	movs	r0, #67	; 0x43
 8000970:	f7ff ff3c 	bl	80007ec <direction>
			 	 		 brake(0);
 8000974:	2000      	movs	r0, #0
 8000976:	f7ff ff55 	bl	8000824 <brake>
			 	 		 while(!door_state())
 800097a:	e018      	b.n	80009ae <normal_state+0x9e>
			 	 		 {

			 	 			 while(person_present('B'))
			 	 			 {
			 	 				 direction('O');
 800097c:	204f      	movs	r0, #79	; 0x4f
 800097e:	f7ff ff35 	bl	80007ec <direction>
			 	 				 brake(0);
 8000982:	2000      	movs	r0, #0
 8000984:	f7ff ff4e 	bl	8000824 <brake>
			 	 				 HAL_Delay(2000);
 8000988:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800098c:	f000 fb58 	bl	8001040 <HAL_Delay>
			 	 				 if(!person_present('B'))
 8000990:	2042      	movs	r0, #66	; 0x42
 8000992:	f7ff fe9d 	bl	80006d0 <person_present>
			 	 				 {

			 	 				 }
			 	 				//HAL_Delay(200);

			 	 				HAL_Delay(200); }
 8000996:	20c8      	movs	r0, #200	; 0xc8
 8000998:	f000 fb52 	bl	8001040 <HAL_Delay>
			 	 			 while(person_present('B'))
 800099c:	2042      	movs	r0, #66	; 0x42
 800099e:	f7ff fe97 	bl	80006d0 <person_present>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d1e9      	bne.n	800097c <normal_state+0x6c>

			 	 			 direction('C');
 80009a8:	2043      	movs	r0, #67	; 0x43
 80009aa:	f7ff ff1f 	bl	80007ec <direction>
			 	 		 while(!door_state())
 80009ae:	f7ff ff0d 	bl	80007cc <door_state>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d0f1      	beq.n	800099c <normal_state+0x8c>
			 	 		 }
			 	 		 brake(1);
 80009b8:	2001      	movs	r0, #1
 80009ba:	f7ff ff33 	bl	8000824 <brake>
			 	 		 if(door_state() && (!override)){
 80009be:	f7ff ff05 	bl	80007cc <door_state>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d06d      	beq.n	8000aa4 <normal_state+0x194>
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d16a      	bne.n	8000aa4 <normal_state+0x194>

			 	 			 move_actuator('L');
 80009ce:	204c      	movs	r0, #76	; 0x4c
 80009d0:	f7ff fea8 	bl	8000724 <move_actuator>
			 	 			 while(!actuator_state()){
 80009d4:	e002      	b.n	80009dc <normal_state+0xcc>
			 	 				 HAL_Delay(20);
 80009d6:	2014      	movs	r0, #20
 80009d8:	f000 fb32 	bl	8001040 <HAL_Delay>
			 	 			 while(!actuator_state()){
 80009dc:	f7ff fee8 	bl	80007b0 <actuator_state>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d0f7      	beq.n	80009d6 <normal_state+0xc6>
			 	 			 }
 			 	 		move_actuator('S');
 80009e6:	2053      	movs	r0, #83	; 0x53
 80009e8:	f7ff fe9c 	bl	8000724 <move_actuator>
			 	 		 if(door_state() && (!override)){
 80009ec:	e05a      	b.n	8000aa4 <normal_state+0x194>

			 	 		 }
			 	 	 }
	else
		{
			if(HAL_GPIO_ReadPin (GPIOD, GPIO_PIN_6))
 80009ee:	2140      	movs	r1, #64	; 0x40
 80009f0:	4833      	ldr	r0, [pc, #204]	; (8000ac0 <normal_state+0x1b0>)
 80009f2:	f000 fda9 	bl	8001548 <HAL_GPIO_ReadPin>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d053      	beq.n	8000aa4 <normal_state+0x194>
			{
			if(person_present('B'))
 80009fc:	2042      	movs	r0, #66	; 0x42
 80009fe:	f7ff fe67 	bl	80006d0 <person_present>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d04d      	beq.n	8000aa4 <normal_state+0x194>
			{
			 if(actuator_state())
 8000a08:	f7ff fed2 	bl	80007b0 <actuator_state>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d00e      	beq.n	8000a30 <normal_state+0x120>
				{
				 move_actuator('U');
 8000a12:	2055      	movs	r0, #85	; 0x55
 8000a14:	f7ff fe86 	bl	8000724 <move_actuator>
				 while(actuator_state())
 8000a18:	e002      	b.n	8000a20 <normal_state+0x110>
				  {
					HAL_Delay(20);
 8000a1a:	2014      	movs	r0, #20
 8000a1c:	f000 fb10 	bl	8001040 <HAL_Delay>
				 while(actuator_state())
 8000a20:	f7ff fec6 	bl	80007b0 <actuator_state>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d1f7      	bne.n	8000a1a <normal_state+0x10a>
				  }
				move_actuator('S');
 8000a2a:	2053      	movs	r0, #83	; 0x53
 8000a2c:	f7ff fe7a 	bl	8000724 <move_actuator>
			     }
			 direction('O');
 8000a30:	204f      	movs	r0, #79	; 0x4f
 8000a32:	f7ff fedb 	bl	80007ec <direction>
			 brake(0);
 8000a36:	2000      	movs	r0, #0
 8000a38:	f7ff fef4 	bl	8000824 <brake>
			 HAL_Delay(15000);
 8000a3c:	f643 2098 	movw	r0, #15000	; 0x3a98
 8000a40:	f000 fafe 	bl	8001040 <HAL_Delay>
			 brake(1);
 8000a44:	2001      	movs	r0, #1
 8000a46:	f7ff feed 	bl	8000824 <brake>
			 HAL_Delay(5000);
 8000a4a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a4e:	f000 faf7 	bl	8001040 <HAL_Delay>
			 direction('C');
 8000a52:	2043      	movs	r0, #67	; 0x43
 8000a54:	f7ff feca 	bl	80007ec <direction>
			 brake(0);
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff fee3 	bl	8000824 <brake>
			 while(!door_state())
 8000a5e:	e002      	b.n	8000a66 <normal_state+0x156>
				{
				  HAL_Delay(50);
 8000a60:	2032      	movs	r0, #50	; 0x32
 8000a62:	f000 faed 	bl	8001040 <HAL_Delay>
			 while(!door_state())
 8000a66:	f7ff feb1 	bl	80007cc <door_state>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0f7      	beq.n	8000a60 <normal_state+0x150>
				}
			 brake(1);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f7ff fed7 	bl	8000824 <brake>
			 if(door_state() && (!override)){
 8000a76:	f7ff fea9 	bl	80007cc <door_state>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d011      	beq.n	8000aa4 <normal_state+0x194>
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d10e      	bne.n	8000aa4 <normal_state+0x194>

				move_actuator('L');
 8000a86:	204c      	movs	r0, #76	; 0x4c
 8000a88:	f7ff fe4c 	bl	8000724 <move_actuator>
				while(!actuator_state())
 8000a8c:	e002      	b.n	8000a94 <normal_state+0x184>
				{
				    HAL_Delay(20);
 8000a8e:	2014      	movs	r0, #20
 8000a90:	f000 fad6 	bl	8001040 <HAL_Delay>
				while(!actuator_state())
 8000a94:	f7ff fe8c 	bl	80007b0 <actuator_state>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0f7      	beq.n	8000a8e <normal_state+0x17e>
				}
				move_actuator('S');
 8000a9e:	2053      	movs	r0, #83	; 0x53
 8000aa0:	f7ff fe40 	bl	8000724 <move_actuator>
 	while(!HAL_GPIO_ReadPin(GPIOD, remained_open_Pin))
 8000aa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <normal_state+0x1b0>)
 8000aaa:	f000 fd4d 	bl	8001548 <HAL_GPIO_ReadPin>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	f43f af33 	beq.w	800091c <normal_state+0xc>
		}



}
}
 8000ab6:	bf00      	nop
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	48000c00 	.word	0x48000c00

08000ac4 <emergency_close>:
void emergency_close(void){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	 if(!door_state()){
 8000ac8:	f7ff fe80 	bl	80007cc <door_state>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d134      	bne.n	8000b3c <emergency_close+0x78>

					 if(actuator_state())
 8000ad2:	f7ff fe6d 	bl	80007b0 <actuator_state>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d00e      	beq.n	8000afa <emergency_close+0x36>
					 {
						 move_actuator('U');
 8000adc:	2055      	movs	r0, #85	; 0x55
 8000ade:	f7ff fe21 	bl	8000724 <move_actuator>
						 while(actuator_state()){HAL_Delay(20);}
 8000ae2:	e002      	b.n	8000aea <emergency_close+0x26>
 8000ae4:	2014      	movs	r0, #20
 8000ae6:	f000 faab 	bl	8001040 <HAL_Delay>
 8000aea:	f7ff fe61 	bl	80007b0 <actuator_state>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1f7      	bne.n	8000ae4 <emergency_close+0x20>
						 move_actuator('S');
 8000af4:	2053      	movs	r0, #83	; 0x53
 8000af6:	f7ff fe15 	bl	8000724 <move_actuator>

					 }
					 direction('C');
 8000afa:	2043      	movs	r0, #67	; 0x43
 8000afc:	f7ff fe76 	bl	80007ec <direction>
					 brake(0);
 8000b00:	2000      	movs	r0, #0
 8000b02:	f7ff fe8f 	bl	8000824 <brake>
					 while(!door_state()){HAL_Delay(20);}
 8000b06:	e002      	b.n	8000b0e <emergency_close+0x4a>
 8000b08:	2014      	movs	r0, #20
 8000b0a:	f000 fa99 	bl	8001040 <HAL_Delay>
 8000b0e:	f7ff fe5d 	bl	80007cc <door_state>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d0f7      	beq.n	8000b08 <emergency_close+0x44>
					 brake(1);
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f7ff fe83 	bl	8000824 <brake>
					 move_actuator('L');
 8000b1e:	204c      	movs	r0, #76	; 0x4c
 8000b20:	f7ff fe00 	bl	8000724 <move_actuator>
					 while(!actuator_state()){HAL_Delay(20);}
 8000b24:	e002      	b.n	8000b2c <emergency_close+0x68>
 8000b26:	2014      	movs	r0, #20
 8000b28:	f000 fa8a 	bl	8001040 <HAL_Delay>
 8000b2c:	f7ff fe40 	bl	80007b0 <actuator_state>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d0f7      	beq.n	8000b26 <emergency_close+0x62>
					 move_actuator('S');
 8000b36:	2053      	movs	r0, #83	; 0x53
 8000b38:	f7ff fdf4 	bl	8000724 <move_actuator>


				 }

}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <remained_open>:
void remained_open(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD, remained_open_Pin))
 8000b44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b48:	482a      	ldr	r0, [pc, #168]	; (8000bf4 <remained_open+0xb4>)
 8000b4a:	f000 fcfd 	bl	8001548 <HAL_GPIO_ReadPin>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d04d      	beq.n	8000bf0 <remained_open+0xb0>
		  {
			  if(actuator_state())
 8000b54:	f7ff fe2c 	bl	80007b0 <actuator_state>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d00e      	beq.n	8000b7c <remained_open+0x3c>
			  	 {
			  		move_actuator('U');
 8000b5e:	2055      	movs	r0, #85	; 0x55
 8000b60:	f7ff fde0 	bl	8000724 <move_actuator>
			  		while(actuator_state())
 8000b64:	e002      	b.n	8000b6c <remained_open+0x2c>
			  		 {
			  			 HAL_Delay(20);
 8000b66:	2014      	movs	r0, #20
 8000b68:	f000 fa6a 	bl	8001040 <HAL_Delay>
			  		while(actuator_state())
 8000b6c:	f7ff fe20 	bl	80007b0 <actuator_state>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1f7      	bne.n	8000b66 <remained_open+0x26>
			  		  }
			  		move_actuator('S');
 8000b76:	2053      	movs	r0, #83	; 0x53
 8000b78:	f7ff fdd4 	bl	8000724 <move_actuator>
			  	  }
			  	brake(0);
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f7ff fe51 	bl	8000824 <brake>
			  	direction('O');
 8000b82:	204f      	movs	r0, #79	; 0x4f
 8000b84:	f7ff fe32 	bl	80007ec <direction>
			  	HAL_Delay(17000);
 8000b88:	f244 2068 	movw	r0, #17000	; 0x4268
 8000b8c:	f000 fa58 	bl	8001040 <HAL_Delay>
			  	brake(1);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f7ff fe47 	bl	8000824 <brake>
			  	while(HAL_GPIO_ReadPin(GPIOD, remained_open_Pin))
 8000b96:	e002      	b.n	8000b9e <remained_open+0x5e>
			  	{
			  		HAL_Delay(50);
 8000b98:	2032      	movs	r0, #50	; 0x32
 8000b9a:	f000 fa51 	bl	8001040 <HAL_Delay>
			  	while(HAL_GPIO_ReadPin(GPIOD, remained_open_Pin))
 8000b9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba2:	4814      	ldr	r0, [pc, #80]	; (8000bf4 <remained_open+0xb4>)
 8000ba4:	f000 fcd0 	bl	8001548 <HAL_GPIO_ReadPin>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d1f4      	bne.n	8000b98 <remained_open+0x58>
			  	}
			  	 direction('C');
 8000bae:	2043      	movs	r0, #67	; 0x43
 8000bb0:	f7ff fe1c 	bl	80007ec <direction>
			     brake(0);
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f7ff fe35 	bl	8000824 <brake>
			     while(!door_state())
 8000bba:	e002      	b.n	8000bc2 <remained_open+0x82>
			     {
			    	 HAL_Delay(50);
 8000bbc:	2032      	movs	r0, #50	; 0x32
 8000bbe:	f000 fa3f 	bl	8001040 <HAL_Delay>
			     while(!door_state())
 8000bc2:	f7ff fe03 	bl	80007cc <door_state>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d0f7      	beq.n	8000bbc <remained_open+0x7c>
			     }
			     brake(1);
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f7ff fe29 	bl	8000824 <brake>
			     move_actuator('L');
 8000bd2:	204c      	movs	r0, #76	; 0x4c
 8000bd4:	f7ff fda6 	bl	8000724 <move_actuator>
			     while(!actuator_state()){
 8000bd8:	e002      	b.n	8000be0 <remained_open+0xa0>
			     		HAL_Delay(20);
 8000bda:	2014      	movs	r0, #20
 8000bdc:	f000 fa30 	bl	8001040 <HAL_Delay>
			     while(!actuator_state()){
 8000be0:	f7ff fde6 	bl	80007b0 <actuator_state>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0f7      	beq.n	8000bda <remained_open+0x9a>
			     		}
			     move_actuator('S');
 8000bea:	2053      	movs	r0, #83	; 0x53
 8000bec:	f7ff fd9a 	bl	8000724 <move_actuator>
		  }
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	48000c00 	.word	0x48000c00

08000bf8 <manager_auth>:
uint8_t manager_auth(void){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0


	HAL_Delay(10);
 8000bfc:	200a      	movs	r0, #10
 8000bfe:	f000 fa1f 	bl	8001040 <HAL_Delay>
	return HAL_GPIO_ReadPin(GPIOA, manager_button_Pin);
 8000c02:	2102      	movs	r1, #2
 8000c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c08:	f000 fc9e 	bl	8001548 <HAL_GPIO_ReadPin>
 8000c0c:	4603      	mov	r3, r0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <move_motor>:
		}
	return countpos;


}
void move_motor(uint8_t dir,uint8_t degree){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b094      	sub	sp, #80	; 0x50
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	460a      	mov	r2, r1
 8000c1e:	71fb      	strb	r3, [r7, #7]
 8000c20:	4613      	mov	r3, r2
 8000c22:	71bb      	strb	r3, [r7, #6]
	char uart_buf[50];
    int uart_buf_len;
	uint32_t rising_flag = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t count= 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t pulses=0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	647b      	str	r3, [r7, #68]	; 0x44
	pulses = (degree*TOTAL_PULSES)/360;
 8000c30:	79ba      	ldrb	r2, [r7, #6]
 8000c32:	4613      	mov	r3, r2
 8000c34:	015b      	lsls	r3, r3, #5
 8000c36:	1a9b      	subs	r3, r3, r2
 8000c38:	019a      	lsls	r2, r3, #6
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a22      	ldr	r2, [pc, #136]	; (8000cc8 <move_motor+0xb4>)
 8000c3e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c42:	441a      	add	r2, r3
 8000c44:	1212      	asrs	r2, r2, #8
 8000c46:	17db      	asrs	r3, r3, #31
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	647b      	str	r3, [r7, #68]	; 0x44
	direction(dir);
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fdcc 	bl	80007ec <direction>
	brake(0);
 8000c54:	2000      	movs	r0, #0
 8000c56:	f7ff fde5 	bl	8000824 <brake>

while(count < pulses)
 8000c5a:	e02a      	b.n	8000cb2 <move_motor+0x9e>
{
    if(!rising_flag){
 8000c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d10c      	bne.n	8000c7c <move_motor+0x68>

    	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5)){
 8000c62:	2120      	movs	r1, #32
 8000c64:	4819      	ldr	r0, [pc, #100]	; (8000ccc <move_motor+0xb8>)
 8000c66:	f000 fc6f 	bl	8001548 <HAL_GPIO_ReadPin>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d00e      	beq.n	8000c8e <move_motor+0x7a>

    		count++;
 8000c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c72:	3301      	adds	r3, #1
 8000c74:	64bb      	str	r3, [r7, #72]	; 0x48
    		rising_flag= 1;
 8000c76:	2301      	movs	r3, #1
 8000c78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c7a:	e008      	b.n	8000c8e <move_motor+0x7a>
    	}
    }
    else
    {
    	if(!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5)){
 8000c7c:	2120      	movs	r1, #32
 8000c7e:	4813      	ldr	r0, [pc, #76]	; (8000ccc <move_motor+0xb8>)
 8000c80:	f000 fc62 	bl	8001548 <HAL_GPIO_ReadPin>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <move_motor+0x7a>

    		rising_flag = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
    	}

    }

	//for(uint32_t i=0;i<10000;i++);
    uart_buf_len = sprintf(uart_buf,"%lu count\r\n", count);
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c94:	490e      	ldr	r1, [pc, #56]	; (8000cd0 <move_motor+0xbc>)
 8000c96:	4618      	mov	r0, r3
 8000c98:	f002 fd26 	bl	80036e8 <siprintf>
 8000c9c:	6438      	str	r0, [r7, #64]	; 0x40
    HAL_UART_Transmit(&huart1,&uart_buf, uart_buf_len+1, 100);
 8000c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	f107 010c 	add.w	r1, r7, #12
 8000caa:	2364      	movs	r3, #100	; 0x64
 8000cac:	4809      	ldr	r0, [pc, #36]	; (8000cd4 <move_motor+0xc0>)
 8000cae:	f002 f895 	bl	8002ddc <HAL_UART_Transmit>
while(count < pulses)
 8000cb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d3d0      	bcc.n	8000c5c <move_motor+0x48>

}

brake(1);
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f7ff fdb2 	bl	8000824 <brake>
}
 8000cc0:	bf00      	nop
 8000cc2:	3750      	adds	r7, #80	; 0x50
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	b60b60b7 	.word	0xb60b60b7
 8000ccc:	48000c00 	.word	0x48000c00
 8000cd0:	08003f5c 	.word	0x08003f5c
 8000cd4:	20000098 	.word	0x20000098

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <Error_Handler+0x8>
	...

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <HAL_MspInit+0x44>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <HAL_MspInit+0x44>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6193      	str	r3, [r2, #24]
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <HAL_MspInit+0x44>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <HAL_MspInit+0x44>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <HAL_MspInit+0x44>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	61d3      	str	r3, [r2, #28]
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_MspInit+0x44>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d1a:	2007      	movs	r0, #7
 8000d1c:	f000 fa66 	bl	80011ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40021000 	.word	0x40021000

08000d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <HAL_UART_MspInit+0x7c>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d127      	bne.n	8000d9e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <HAL_UART_MspInit+0x80>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	4a16      	ldr	r2, [pc, #88]	; (8000dac <HAL_UART_MspInit+0x80>)
 8000d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d58:	6193      	str	r3, [r2, #24]
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_UART_MspInit+0x80>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_UART_MspInit+0x80>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	4a10      	ldr	r2, [pc, #64]	; (8000dac <HAL_UART_MspInit+0x80>)
 8000d6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d70:	6153      	str	r3, [r2, #20]
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_UART_MspInit+0x80>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d7e:	2330      	movs	r3, #48	; 0x30
 8000d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d8e:	2307      	movs	r3, #7
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <HAL_UART_MspInit+0x84>)
 8000d9a:	f000 fa5b 	bl	8001254 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	3728      	adds	r7, #40	; 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40013800 	.word	0x40013800
 8000dac:	40021000 	.word	0x40021000
 8000db0:	48000800 	.word	0x48000800

08000db4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a18      	ldr	r2, [pc, #96]	; (8000e34 <HAL_PCD_MspInit+0x80>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d129      	bne.n	8000e2a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <HAL_PCD_MspInit+0x84>)
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <HAL_PCD_MspInit+0x84>)
 8000ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de0:	6153      	str	r3, [r2, #20]
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_PCD_MspInit+0x84>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000dee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000e00:	230e      	movs	r3, #14
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0e:	f000 fa21 	bl	8001254 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <HAL_PCD_MspInit+0x84>)
 8000e14:	69db      	ldr	r3, [r3, #28]
 8000e16:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <HAL_PCD_MspInit+0x84>)
 8000e18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e1c:	61d3      	str	r3, [r2, #28]
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_PCD_MspInit+0x84>)
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3728      	adds	r7, #40	; 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40005c00 	.word	0x40005c00
 8000e38:	40021000 	.word	0x40021000

08000e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <NMI_Handler+0x4>

08000e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <HardFault_Handler+0x4>

08000e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <MemManage_Handler+0x4>

08000e4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <BusFault_Handler+0x4>

08000e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <UsageFault_Handler+0x4>

08000e5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e88:	f000 f8ba 	bl	8001000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e98:	4a14      	ldr	r2, [pc, #80]	; (8000eec <_sbrk+0x5c>)
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <_sbrk+0x60>)
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea4:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d102      	bne.n	8000eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <_sbrk+0x64>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <_sbrk+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d207      	bcs.n	8000ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec0:	f002 fbe0 	bl	8003684 <__errno>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	e009      	b.n	8000ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed6:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <_sbrk+0x64>)
 8000ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	2000a000 	.word	0x2000a000
 8000ef0:	00000400 	.word	0x00000400
 8000ef4:	2000008c 	.word	0x2000008c
 8000ef8:	20000428 	.word	0x20000428

08000efc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <SystemInit+0x20>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <SystemInit+0x20>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f58 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f26:	490e      	ldr	r1, [pc, #56]	; (8000f60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f28:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <LoopForever+0xe>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f2c:	e002      	b.n	8000f34 <LoopCopyDataInit>

08000f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f32:	3304      	adds	r3, #4

08000f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f38:	d3f9      	bcc.n	8000f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f3c:	4c0b      	ldr	r4, [pc, #44]	; (8000f6c <LoopForever+0x16>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f40:	e001      	b.n	8000f46 <LoopFillZerobss>

08000f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f44:	3204      	adds	r2, #4

08000f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f48:	d3fb      	bcc.n	8000f42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f4a:	f7ff ffd7 	bl	8000efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f002 fb9f 	bl	8003690 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f52:	f7ff f98d 	bl	8000270 <main>

08000f56 <LoopForever>:

LoopForever:
    b LoopForever
 8000f56:	e7fe      	b.n	8000f56 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f58:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f64:	08003fdc 	.word	0x08003fdc
  ldr r2, =_sbss
 8000f68:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f6c:	20000424 	.word	0x20000424

08000f70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC1_2_IRQHandler>
	...

08000f74 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_Init+0x28>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <HAL_Init+0x28>)
 8000f7e:	f043 0310 	orr.w	r3, r3, #16
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f84:	2003      	movs	r0, #3
 8000f86:	f000 f931 	bl	80011ec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f000 f808 	bl	8000fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f90:	f7ff fea8 	bl	8000ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40022000 	.word	0x40022000

08000fa0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0x54>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_InitTick+0x58>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f93b 	bl	800123a <HAL_SYSTICK_Config>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00e      	b.n	8000fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b0f      	cmp	r3, #15
 8000fd2:	d80a      	bhi.n	8000fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f000 f911 	bl	8001202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe0:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <HAL_InitTick+0x5c>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e000      	b.n	8000fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	20000004 	.word	0x20000004

08001000 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x20>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x24>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_IncTick+0x24>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000008 	.word	0x20000008
 8001024:	20000410 	.word	0x20000410

08001028 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;  
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <HAL_GetTick+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000410 	.word	0x20000410

08001040 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001048:	f7ff ffee 	bl	8001028 <HAL_GetTick>
 800104c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001058:	d005      	beq.n	8001066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_Delay+0x44>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4413      	add	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001066:	bf00      	nop
 8001068:	f7ff ffde 	bl	8001028 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8f7      	bhi.n	8001068 <HAL_Delay+0x28>
  {
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000008 	.word	0x20000008

08001088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a4:	4013      	ands	r3, r2
 80010a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ba:	4a04      	ldr	r2, [pc, #16]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	60d3      	str	r3, [r2, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <__NVIC_GetPriorityGrouping+0x18>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	0a1b      	lsrs	r3, r3, #8
 80010da:	f003 0307 	and.w	r3, r3, #7
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	; (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	; (800113c <__NVIC_SetPriority+0x50>)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	; 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2b04      	cmp	r3, #4
 800115c:	bf28      	it	cs
 800115e:	2304      	movcs	r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3304      	adds	r3, #4
 8001166:	2b06      	cmp	r3, #6
 8001168:	d902      	bls.n	8001170 <NVIC_EncodePriority+0x30>
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3b03      	subs	r3, #3
 800116e:	e000      	b.n	8001172 <NVIC_EncodePriority+0x32>
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	f04f 32ff 	mov.w	r2, #4294967295
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43da      	mvns	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001188:	f04f 31ff 	mov.w	r1, #4294967295
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43d9      	mvns	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	4313      	orrs	r3, r2
         );
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	; 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b8:	d301      	bcc.n	80011be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00f      	b.n	80011de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <SysTick_Config+0x40>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c6:	210f      	movs	r1, #15
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295
 80011cc:	f7ff ff8e 	bl	80010ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <SysTick_Config+0x40>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <SysTick_Config+0x40>)
 80011d8:	2207      	movs	r2, #7
 80011da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	e000e010 	.word	0xe000e010

080011ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff47 	bl	8001088 <__NVIC_SetPriorityGrouping>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001214:	f7ff ff5c 	bl	80010d0 <__NVIC_GetPriorityGrouping>
 8001218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	6978      	ldr	r0, [r7, #20]
 8001220:	f7ff ff8e 	bl	8001140 <NVIC_EncodePriority>
 8001224:	4602      	mov	r2, r0
 8001226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff5d 	bl	80010ec <__NVIC_SetPriority>
}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ffb0 	bl	80011a8 <SysTick_Config>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001254:	b480      	push	{r7}
 8001256:	b087      	sub	sp, #28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001262:	e154      	b.n	800150e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	2101      	movs	r1, #1
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	4013      	ands	r3, r2
 8001272:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 8146 	beq.w	8001508 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b01      	cmp	r3, #1
 8001286:	d005      	beq.n	8001294 <HAL_GPIO_Init+0x40>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d130      	bne.n	80012f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ca:	2201      	movs	r2, #1
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	091b      	lsrs	r3, r3, #4
 80012e0:	f003 0201 	and.w	r2, r3, #1
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d017      	beq.n	8001332 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	2203      	movs	r2, #3
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d123      	bne.n	8001386 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	08da      	lsrs	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3208      	adds	r2, #8
 8001346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800134a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	220f      	movs	r2, #15
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	691a      	ldr	r2, [r3, #16]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	08da      	lsrs	r2, r3, #3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3208      	adds	r2, #8
 8001380:	6939      	ldr	r1, [r7, #16]
 8001382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	2203      	movs	r2, #3
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0203 	and.w	r2, r3, #3
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 80a0 	beq.w	8001508 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c8:	4b58      	ldr	r3, [pc, #352]	; (800152c <HAL_GPIO_Init+0x2d8>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a57      	ldr	r2, [pc, #348]	; (800152c <HAL_GPIO_Init+0x2d8>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b55      	ldr	r3, [pc, #340]	; (800152c <HAL_GPIO_Init+0x2d8>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013e0:	4a53      	ldr	r2, [pc, #332]	; (8001530 <HAL_GPIO_Init+0x2dc>)
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	089b      	lsrs	r3, r3, #2
 80013e6:	3302      	adds	r3, #2
 80013e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	220f      	movs	r2, #15
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800140a:	d019      	beq.n	8001440 <HAL_GPIO_Init+0x1ec>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a49      	ldr	r2, [pc, #292]	; (8001534 <HAL_GPIO_Init+0x2e0>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d013      	beq.n	800143c <HAL_GPIO_Init+0x1e8>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a48      	ldr	r2, [pc, #288]	; (8001538 <HAL_GPIO_Init+0x2e4>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d00d      	beq.n	8001438 <HAL_GPIO_Init+0x1e4>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a47      	ldr	r2, [pc, #284]	; (800153c <HAL_GPIO_Init+0x2e8>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d007      	beq.n	8001434 <HAL_GPIO_Init+0x1e0>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a46      	ldr	r2, [pc, #280]	; (8001540 <HAL_GPIO_Init+0x2ec>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d101      	bne.n	8001430 <HAL_GPIO_Init+0x1dc>
 800142c:	2304      	movs	r3, #4
 800142e:	e008      	b.n	8001442 <HAL_GPIO_Init+0x1ee>
 8001430:	2305      	movs	r3, #5
 8001432:	e006      	b.n	8001442 <HAL_GPIO_Init+0x1ee>
 8001434:	2303      	movs	r3, #3
 8001436:	e004      	b.n	8001442 <HAL_GPIO_Init+0x1ee>
 8001438:	2302      	movs	r3, #2
 800143a:	e002      	b.n	8001442 <HAL_GPIO_Init+0x1ee>
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <HAL_GPIO_Init+0x1ee>
 8001440:	2300      	movs	r3, #0
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	f002 0203 	and.w	r2, r2, #3
 8001448:	0092      	lsls	r2, r2, #2
 800144a:	4093      	lsls	r3, r2
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001452:	4937      	ldr	r1, [pc, #220]	; (8001530 <HAL_GPIO_Init+0x2dc>)
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	089b      	lsrs	r3, r3, #2
 8001458:	3302      	adds	r3, #2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001460:	4b38      	ldr	r3, [pc, #224]	; (8001544 <HAL_GPIO_Init+0x2f0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	43db      	mvns	r3, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001484:	4a2f      	ldr	r2, [pc, #188]	; (8001544 <HAL_GPIO_Init+0x2f0>)
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800148a:	4b2e      	ldr	r3, [pc, #184]	; (8001544 <HAL_GPIO_Init+0x2f0>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	43db      	mvns	r3, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014ae:	4a25      	ldr	r2, [pc, #148]	; (8001544 <HAL_GPIO_Init+0x2f0>)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014b4:	4b23      	ldr	r3, [pc, #140]	; (8001544 <HAL_GPIO_Init+0x2f0>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	43db      	mvns	r3, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014d8:	4a1a      	ldr	r2, [pc, #104]	; (8001544 <HAL_GPIO_Init+0x2f0>)
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014de:	4b19      	ldr	r3, [pc, #100]	; (8001544 <HAL_GPIO_Init+0x2f0>)
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001502:	4a10      	ldr	r2, [pc, #64]	; (8001544 <HAL_GPIO_Init+0x2f0>)
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	3301      	adds	r3, #1
 800150c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	fa22 f303 	lsr.w	r3, r2, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	f47f aea3 	bne.w	8001264 <HAL_GPIO_Init+0x10>
  }
}
 800151e:	bf00      	nop
 8001520:	bf00      	nop
 8001522:	371c      	adds	r7, #28
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	40021000 	.word	0x40021000
 8001530:	40010000 	.word	0x40010000
 8001534:	48000400 	.word	0x48000400
 8001538:	48000800 	.word	0x48000800
 800153c:	48000c00 	.word	0x48000c00
 8001540:	48001000 	.word	0x48001000
 8001544:	40010400 	.word	0x40010400

08001548 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691a      	ldr	r2, [r3, #16]
 8001558:	887b      	ldrh	r3, [r7, #2]
 800155a:	4013      	ands	r3, r2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d002      	beq.n	8001566 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001560:	2301      	movs	r3, #1
 8001562:	73fb      	strb	r3, [r7, #15]
 8001564:	e001      	b.n	800156a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800156a:	7bfb      	ldrb	r3, [r7, #15]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	807b      	strh	r3, [r7, #2]
 8001584:	4613      	mov	r3, r2
 8001586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001588:	787b      	ldrb	r3, [r7, #1]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001594:	e002      	b.n	800159c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015aa:	b08b      	sub	sp, #44	; 0x2c
 80015ac:	af06      	add	r7, sp, #24
 80015ae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e0d0      	b.n	800175c <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d106      	bne.n	80015d4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fbf0 	bl	8000db4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2203      	movs	r2, #3
 80015d8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f002 f812 	bl	800360a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015e6:	2300      	movs	r3, #0
 80015e8:	73fb      	strb	r3, [r7, #15]
 80015ea:	e04c      	b.n	8001686 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	1c5a      	adds	r2, r3, #1
 80015f2:	4613      	mov	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	440b      	add	r3, r1
 80015fc:	3301      	adds	r3, #1
 80015fe:	2201      	movs	r2, #1
 8001600:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	440b      	add	r3, r1
 8001612:	7bfa      	ldrb	r2, [r7, #15]
 8001614:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001616:	7bfa      	ldrb	r2, [r7, #15]
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	b298      	uxth	r0, r3
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	440b      	add	r3, r1
 8001628:	3336      	adds	r3, #54	; 0x36
 800162a:	4602      	mov	r2, r0
 800162c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	440b      	add	r3, r1
 800163e:	3303      	adds	r3, #3
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001644:	7bfa      	ldrb	r2, [r7, #15]
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	440b      	add	r3, r1
 8001652:	3338      	adds	r3, #56	; 0x38
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	440b      	add	r3, r1
 8001666:	333c      	adds	r3, #60	; 0x3c
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800166c:	7bfa      	ldrb	r2, [r7, #15]
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	440b      	add	r3, r1
 800167a:	3340      	adds	r3, #64	; 0x40
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	3301      	adds	r3, #1
 8001684:	73fb      	strb	r3, [r7, #15]
 8001686:	7bfa      	ldrb	r2, [r7, #15]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	429a      	cmp	r2, r3
 800168e:	d3ad      	bcc.n	80015ec <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]
 8001694:	e044      	b.n	8001720 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001696:	7bfa      	ldrb	r2, [r7, #15]
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	440b      	add	r3, r1
 80016a4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016ac:	7bfa      	ldrb	r2, [r7, #15]
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	440b      	add	r3, r1
 80016ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016be:	7bfa      	ldrb	r2, [r7, #15]
 80016c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016c2:	7bfa      	ldrb	r2, [r7, #15]
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	440b      	add	r3, r1
 80016d0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016d8:	7bfa      	ldrb	r2, [r7, #15]
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	440b      	add	r3, r1
 80016e6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016ee:	7bfa      	ldrb	r2, [r7, #15]
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	440b      	add	r3, r1
 80016fc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001704:	7bfa      	ldrb	r2, [r7, #15]
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	440b      	add	r3, r1
 8001712:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	3301      	adds	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]
 8001720:	7bfa      	ldrb	r2, [r7, #15]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	429a      	cmp	r2, r3
 8001728:	d3b5      	bcc.n	8001696 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	687e      	ldr	r6, [r7, #4]
 8001732:	466d      	mov	r5, sp
 8001734:	f106 0410 	add.w	r4, r6, #16
 8001738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800173a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800173c:	6823      	ldr	r3, [r4, #0]
 800173e:	602b      	str	r3, [r5, #0]
 8001740:	1d33      	adds	r3, r6, #4
 8001742:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001744:	6838      	ldr	r0, [r7, #0]
 8001746:	f001 ff7b 	bl	8003640 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001764 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800176a:	af00      	add	r7, sp, #0
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d102      	bne.n	800177e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	f000 bef4 	b.w	8002566 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 816a 	beq.w	8001a62 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800178e:	4bb3      	ldr	r3, [pc, #716]	; (8001a5c <HAL_RCC_OscConfig+0x2f8>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	2b04      	cmp	r3, #4
 8001798:	d00c      	beq.n	80017b4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800179a:	4bb0      	ldr	r3, [pc, #704]	; (8001a5c <HAL_RCC_OscConfig+0x2f8>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d159      	bne.n	800185a <HAL_RCC_OscConfig+0xf6>
 80017a6:	4bad      	ldr	r3, [pc, #692]	; (8001a5c <HAL_RCC_OscConfig+0x2f8>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b2:	d152      	bne.n	800185a <HAL_RCC_OscConfig+0xf6>
 80017b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017b8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80017c0:	fa93 f3a3 	rbit	r3, r3
 80017c4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017c8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	fab3 f383 	clz	r3, r3
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d102      	bne.n	80017e6 <HAL_RCC_OscConfig+0x82>
 80017e0:	4b9e      	ldr	r3, [pc, #632]	; (8001a5c <HAL_RCC_OscConfig+0x2f8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	e015      	b.n	8001812 <HAL_RCC_OscConfig+0xae>
 80017e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ea:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80017f2:	fa93 f3a3 	rbit	r3, r3
 80017f6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80017fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017fe:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001802:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001806:	fa93 f3a3 	rbit	r3, r3
 800180a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800180e:	4b93      	ldr	r3, [pc, #588]	; (8001a5c <HAL_RCC_OscConfig+0x2f8>)
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001816:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800181a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800181e:	fa92 f2a2 	rbit	r2, r2
 8001822:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001826:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800182a:	fab2 f282 	clz	r2, r2
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	f042 0220 	orr.w	r2, r2, #32
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	f002 021f 	and.w	r2, r2, #31
 800183a:	2101      	movs	r1, #1
 800183c:	fa01 f202 	lsl.w	r2, r1, r2
 8001840:	4013      	ands	r3, r2
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 810c 	beq.w	8001a60 <HAL_RCC_OscConfig+0x2fc>
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	f040 8106 	bne.w	8001a60 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	f000 be86 	b.w	8002566 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001864:	d106      	bne.n	8001874 <HAL_RCC_OscConfig+0x110>
 8001866:	4b7d      	ldr	r3, [pc, #500]	; (8001a5c <HAL_RCC_OscConfig+0x2f8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a7c      	ldr	r2, [pc, #496]	; (8001a5c <HAL_RCC_OscConfig+0x2f8>)
 800186c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	e030      	b.n	80018d6 <HAL_RCC_OscConfig+0x172>
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10c      	bne.n	8001898 <HAL_RCC_OscConfig+0x134>
 800187e:	4b77      	ldr	r3, [pc, #476]	; (8001a5c <HAL_RCC_OscConfig+0x2f8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a76      	ldr	r2, [pc, #472]	; (8001a5c <HAL_RCC_OscConfig+0x2f8>)
 8001884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b74      	ldr	r3, [pc, #464]	; (8001a5c <HAL_RCC_OscConfig+0x2f8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a73      	ldr	r2, [pc, #460]	; (8001a5c <HAL_RCC_OscConfig+0x2f8>)
 8001890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e01e      	b.n	80018d6 <HAL_RCC_OscConfig+0x172>
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018a2:	d10c      	bne.n	80018be <HAL_RCC_OscConfig+0x15a>
 80018a4:	4b6d      	ldr	r3, [pc, #436]	; (8001a5c <HAL_RCC_OscConfig+0x2f8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a6c      	ldr	r2, [pc, #432]	; (8001a5c <HAL_RCC_OscConfig+0x2f8>)
 80018aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ae:	6013      	str	r3, [r2, #0]
 80018b0:	4b6a      	ldr	r3, [pc, #424]	; (8001a5c <HAL_RCC_OscConfig+0x2f8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a69      	ldr	r2, [pc, #420]	; (8001a5c <HAL_RCC_OscConfig+0x2f8>)
 80018b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	e00b      	b.n	80018d6 <HAL_RCC_OscConfig+0x172>
 80018be:	4b67      	ldr	r3, [pc, #412]	; (8001a5c <HAL_RCC_OscConfig+0x2f8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a66      	ldr	r2, [pc, #408]	; (8001a5c <HAL_RCC_OscConfig+0x2f8>)
 80018c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	4b64      	ldr	r3, [pc, #400]	; (8001a5c <HAL_RCC_OscConfig+0x2f8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a63      	ldr	r2, [pc, #396]	; (8001a5c <HAL_RCC_OscConfig+0x2f8>)
 80018d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018d6:	4b61      	ldr	r3, [pc, #388]	; (8001a5c <HAL_RCC_OscConfig+0x2f8>)
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018da:	f023 020f 	bic.w	r2, r3, #15
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	495d      	ldr	r1, [pc, #372]	; (8001a5c <HAL_RCC_OscConfig+0x2f8>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d059      	beq.n	80019a8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fb98 	bl	8001028 <HAL_GetTick>
 80018f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fc:	e00a      	b.n	8001914 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018fe:	f7ff fb93 	bl	8001028 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	; 0x64
 800190c:	d902      	bls.n	8001914 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	f000 be29 	b.w	8002566 <HAL_RCC_OscConfig+0xe02>
 8001914:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001918:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001920:	fa93 f3a3 	rbit	r3, r3
 8001924:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001928:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192c:	fab3 f383 	clz	r3, r3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	095b      	lsrs	r3, r3, #5
 8001934:	b2db      	uxtb	r3, r3
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b01      	cmp	r3, #1
 800193e:	d102      	bne.n	8001946 <HAL_RCC_OscConfig+0x1e2>
 8001940:	4b46      	ldr	r3, [pc, #280]	; (8001a5c <HAL_RCC_OscConfig+0x2f8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	e015      	b.n	8001972 <HAL_RCC_OscConfig+0x20e>
 8001946:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800194a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001952:	fa93 f3a3 	rbit	r3, r3
 8001956:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800195a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800195e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001962:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001966:	fa93 f3a3 	rbit	r3, r3
 800196a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800196e:	4b3b      	ldr	r3, [pc, #236]	; (8001a5c <HAL_RCC_OscConfig+0x2f8>)
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001976:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800197a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800197e:	fa92 f2a2 	rbit	r2, r2
 8001982:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001986:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800198a:	fab2 f282 	clz	r2, r2
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	f042 0220 	orr.w	r2, r2, #32
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	f002 021f 	and.w	r2, r2, #31
 800199a:	2101      	movs	r1, #1
 800199c:	fa01 f202 	lsl.w	r2, r1, r2
 80019a0:	4013      	ands	r3, r2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0ab      	beq.n	80018fe <HAL_RCC_OscConfig+0x19a>
 80019a6:	e05c      	b.n	8001a62 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff fb3e 	bl	8001028 <HAL_GetTick>
 80019ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b0:	e00a      	b.n	80019c8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b2:	f7ff fb39 	bl	8001028 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b64      	cmp	r3, #100	; 0x64
 80019c0:	d902      	bls.n	80019c8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	f000 bdcf 	b.w	8002566 <HAL_RCC_OscConfig+0xe02>
 80019c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019cc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80019dc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e0:	fab3 f383 	clz	r3, r3
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d102      	bne.n	80019fa <HAL_RCC_OscConfig+0x296>
 80019f4:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <HAL_RCC_OscConfig+0x2f8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	e015      	b.n	8001a26 <HAL_RCC_OscConfig+0x2c2>
 80019fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019fe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001a06:	fa93 f3a3 	rbit	r3, r3
 8001a0a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a12:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a16:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001a1a:	fa93 f3a3 	rbit	r3, r3
 8001a1e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <HAL_RCC_OscConfig+0x2f8>)
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a2a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001a2e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a32:	fa92 f2a2 	rbit	r2, r2
 8001a36:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001a3a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001a3e:	fab2 f282 	clz	r2, r2
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	f042 0220 	orr.w	r2, r2, #32
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	f002 021f 	and.w	r2, r2, #31
 8001a4e:	2101      	movs	r1, #1
 8001a50:	fa01 f202 	lsl.w	r2, r1, r2
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1ab      	bne.n	80019b2 <HAL_RCC_OscConfig+0x24e>
 8001a5a:	e002      	b.n	8001a62 <HAL_RCC_OscConfig+0x2fe>
 8001a5c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 816f 	beq.w	8001d50 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a72:	4bd0      	ldr	r3, [pc, #832]	; (8001db4 <HAL_RCC_OscConfig+0x650>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00b      	beq.n	8001a96 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a7e:	4bcd      	ldr	r3, [pc, #820]	; (8001db4 <HAL_RCC_OscConfig+0x650>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d16c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x400>
 8001a8a:	4bca      	ldr	r3, [pc, #808]	; (8001db4 <HAL_RCC_OscConfig+0x650>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d166      	bne.n	8001b64 <HAL_RCC_OscConfig+0x400>
 8001a96:	2302      	movs	r3, #2
 8001a98:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001aa8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aac:	fab3 f383 	clz	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d102      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x362>
 8001ac0:	4bbc      	ldr	r3, [pc, #752]	; (8001db4 <HAL_RCC_OscConfig+0x650>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	e013      	b.n	8001aee <HAL_RCC_OscConfig+0x38a>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001ad0:	fa93 f3a3 	rbit	r3, r3
 8001ad4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001ad8:	2302      	movs	r3, #2
 8001ada:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ade:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001ae2:	fa93 f3a3 	rbit	r3, r3
 8001ae6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001aea:	4bb2      	ldr	r3, [pc, #712]	; (8001db4 <HAL_RCC_OscConfig+0x650>)
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	2202      	movs	r2, #2
 8001af0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001af4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001af8:	fa92 f2a2 	rbit	r2, r2
 8001afc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001b00:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001b04:	fab2 f282 	clz	r2, r2
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	f042 0220 	orr.w	r2, r2, #32
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	f002 021f 	and.w	r2, r2, #31
 8001b14:	2101      	movs	r1, #1
 8001b16:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d007      	beq.n	8001b30 <HAL_RCC_OscConfig+0x3cc>
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d002      	beq.n	8001b30 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	f000 bd1b 	b.w	8002566 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b30:	4ba0      	ldr	r3, [pc, #640]	; (8001db4 <HAL_RCC_OscConfig+0x650>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	21f8      	movs	r1, #248	; 0xf8
 8001b40:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b48:	fa91 f1a1 	rbit	r1, r1
 8001b4c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001b50:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001b54:	fab1 f181 	clz	r1, r1
 8001b58:	b2c9      	uxtb	r1, r1
 8001b5a:	408b      	lsls	r3, r1
 8001b5c:	4995      	ldr	r1, [pc, #596]	; (8001db4 <HAL_RCC_OscConfig+0x650>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b62:	e0f5      	b.n	8001d50 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 8085 	beq.w	8001c7a <HAL_RCC_OscConfig+0x516>
 8001b70:	2301      	movs	r3, #1
 8001b72:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b76:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001b7a:	fa93 f3a3 	rbit	r3, r3
 8001b7e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001b82:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	461a      	mov	r2, r3
 8001b98:	2301      	movs	r3, #1
 8001b9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fa44 	bl	8001028 <HAL_GetTick>
 8001ba0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba4:	e00a      	b.n	8001bbc <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ba6:	f7ff fa3f 	bl	8001028 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d902      	bls.n	8001bbc <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	f000 bcd5 	b.w	8002566 <HAL_RCC_OscConfig+0xe02>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001bc6:	fa93 f3a3 	rbit	r3, r3
 8001bca:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001bce:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd2:	fab3 f383 	clz	r3, r3
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	095b      	lsrs	r3, r3, #5
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d102      	bne.n	8001bec <HAL_RCC_OscConfig+0x488>
 8001be6:	4b73      	ldr	r3, [pc, #460]	; (8001db4 <HAL_RCC_OscConfig+0x650>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	e013      	b.n	8001c14 <HAL_RCC_OscConfig+0x4b0>
 8001bec:	2302      	movs	r3, #2
 8001bee:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001bf6:	fa93 f3a3 	rbit	r3, r3
 8001bfa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001bfe:	2302      	movs	r3, #2
 8001c00:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c04:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001c08:	fa93 f3a3 	rbit	r3, r3
 8001c0c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001c10:	4b68      	ldr	r3, [pc, #416]	; (8001db4 <HAL_RCC_OscConfig+0x650>)
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	2202      	movs	r2, #2
 8001c16:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001c1a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001c1e:	fa92 f2a2 	rbit	r2, r2
 8001c22:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001c26:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001c2a:	fab2 f282 	clz	r2, r2
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	f042 0220 	orr.w	r2, r2, #32
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	f002 021f 	and.w	r2, r2, #31
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c40:	4013      	ands	r3, r2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0af      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c46:	4b5b      	ldr	r3, [pc, #364]	; (8001db4 <HAL_RCC_OscConfig+0x650>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	21f8      	movs	r1, #248	; 0xf8
 8001c56:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c5e:	fa91 f1a1 	rbit	r1, r1
 8001c62:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001c66:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001c6a:	fab1 f181 	clz	r1, r1
 8001c6e:	b2c9      	uxtb	r1, r1
 8001c70:	408b      	lsls	r3, r1
 8001c72:	4950      	ldr	r1, [pc, #320]	; (8001db4 <HAL_RCC_OscConfig+0x650>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	600b      	str	r3, [r1, #0]
 8001c78:	e06a      	b.n	8001d50 <HAL_RCC_OscConfig+0x5ec>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c80:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001c84:	fa93 f3a3 	rbit	r3, r3
 8001c88:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001c8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c90:	fab3 f383 	clz	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c9a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca6:	f7ff f9bf 	bl	8001028 <HAL_GetTick>
 8001caa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cae:	e00a      	b.n	8001cc6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb0:	f7ff f9ba 	bl	8001028 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d902      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	f000 bc50 	b.w	8002566 <HAL_RCC_OscConfig+0xe02>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ccc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001cd0:	fa93 f3a3 	rbit	r3, r3
 8001cd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cdc:	fab3 f383 	clz	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d102      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x592>
 8001cf0:	4b30      	ldr	r3, [pc, #192]	; (8001db4 <HAL_RCC_OscConfig+0x650>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	e013      	b.n	8001d1e <HAL_RCC_OscConfig+0x5ba>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d08:	2302      	movs	r3, #2
 8001d0a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001d1a:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <HAL_RCC_OscConfig+0x650>)
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	2202      	movs	r2, #2
 8001d20:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001d24:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d28:	fa92 f2a2 	rbit	r2, r2
 8001d2c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001d30:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001d34:	fab2 f282 	clz	r2, r2
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	f042 0220 	orr.w	r2, r2, #32
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	f002 021f 	and.w	r2, r2, #31
 8001d44:	2101      	movs	r1, #1
 8001d46:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1af      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 80da 	beq.w	8001f14 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d60:	1d3b      	adds	r3, r7, #4
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d069      	beq.n	8001e3e <HAL_RCC_OscConfig+0x6da>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d70:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001d74:	fa93 f3a3 	rbit	r3, r3
 8001d78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d80:	fab3 f383 	clz	r3, r3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_RCC_OscConfig+0x654>)
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	461a      	mov	r2, r3
 8001d90:	2301      	movs	r3, #1
 8001d92:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d94:	f7ff f948 	bl	8001028 <HAL_GetTick>
 8001d98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9c:	e00e      	b.n	8001dbc <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d9e:	f7ff f943 	bl	8001028 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d906      	bls.n	8001dbc <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e3d9      	b.n	8002566 <HAL_RCC_OscConfig+0xe02>
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000
 8001db8:	10908120 	.word	0x10908120
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001dce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	fa93 f2a3 	rbit	r2, r3
 8001de0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001dea:	2202      	movs	r2, #2
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	fa93 f2a3 	rbit	r2, r3
 8001df8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001dfc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfe:	4ba5      	ldr	r3, [pc, #660]	; (8002094 <HAL_RCC_OscConfig+0x930>)
 8001e00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e02:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e06:	2102      	movs	r1, #2
 8001e08:	6019      	str	r1, [r3, #0]
 8001e0a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	fa93 f1a3 	rbit	r1, r3
 8001e14:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e18:	6019      	str	r1, [r3, #0]
  return result;
 8001e1a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	fab3 f383 	clz	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	2101      	movs	r1, #1
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0b0      	beq.n	8001d9e <HAL_RCC_OscConfig+0x63a>
 8001e3c:	e06a      	b.n	8001f14 <HAL_RCC_OscConfig+0x7b0>
 8001e3e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e42:	2201      	movs	r2, #1
 8001e44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	fa93 f2a3 	rbit	r2, r3
 8001e50:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e54:	601a      	str	r2, [r3, #0]
  return result;
 8001e56:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e5a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e5c:	fab3 f383 	clz	r3, r3
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	4b8c      	ldr	r3, [pc, #560]	; (8002098 <HAL_RCC_OscConfig+0x934>)
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e70:	f7ff f8da 	bl	8001028 <HAL_GetTick>
 8001e74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e78:	e009      	b.n	8001e8e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e7a:	f7ff f8d5 	bl	8001028 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e36b      	b.n	8002566 <HAL_RCC_OscConfig+0xe02>
 8001e8e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001e92:	2202      	movs	r2, #2
 8001e94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	fa93 f2a3 	rbit	r2, r3
 8001ea0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001eaa:	2202      	movs	r2, #2
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	fa93 f2a3 	rbit	r2, r3
 8001eb8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	fa93 f2a3 	rbit	r2, r3
 8001ed0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ed4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed6:	4b6f      	ldr	r3, [pc, #444]	; (8002094 <HAL_RCC_OscConfig+0x930>)
 8001ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eda:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ede:	2102      	movs	r1, #2
 8001ee0:	6019      	str	r1, [r3, #0]
 8001ee2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	fa93 f1a3 	rbit	r1, r3
 8001eec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ef0:	6019      	str	r1, [r3, #0]
  return result;
 8001ef2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	fab3 f383 	clz	r3, r3
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	2101      	movs	r1, #1
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1b2      	bne.n	8001e7a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 8158 	beq.w	80021d4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f2a:	4b5a      	ldr	r3, [pc, #360]	; (8002094 <HAL_RCC_OscConfig+0x930>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d112      	bne.n	8001f5c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f36:	4b57      	ldr	r3, [pc, #348]	; (8002094 <HAL_RCC_OscConfig+0x930>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	4a56      	ldr	r2, [pc, #344]	; (8002094 <HAL_RCC_OscConfig+0x930>)
 8001f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f40:	61d3      	str	r3, [r2, #28]
 8001f42:	4b54      	ldr	r3, [pc, #336]	; (8002094 <HAL_RCC_OscConfig+0x930>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f4a:	f107 0308 	add.w	r3, r7, #8
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	f107 0308 	add.w	r3, r7, #8
 8001f54:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f56:	2301      	movs	r3, #1
 8001f58:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5c:	4b4f      	ldr	r3, [pc, #316]	; (800209c <HAL_RCC_OscConfig+0x938>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d11a      	bne.n	8001f9e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f68:	4b4c      	ldr	r3, [pc, #304]	; (800209c <HAL_RCC_OscConfig+0x938>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a4b      	ldr	r2, [pc, #300]	; (800209c <HAL_RCC_OscConfig+0x938>)
 8001f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f72:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f74:	f7ff f858 	bl	8001028 <HAL_GetTick>
 8001f78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7c:	e009      	b.n	8001f92 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7e:	f7ff f853 	bl	8001028 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	; 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e2e9      	b.n	8002566 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f92:	4b42      	ldr	r3, [pc, #264]	; (800209c <HAL_RCC_OscConfig+0x938>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0ef      	beq.n	8001f7e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d106      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x852>
 8001fa8:	4b3a      	ldr	r3, [pc, #232]	; (8002094 <HAL_RCC_OscConfig+0x930>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4a39      	ldr	r2, [pc, #228]	; (8002094 <HAL_RCC_OscConfig+0x930>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	6213      	str	r3, [r2, #32]
 8001fb4:	e02f      	b.n	8002016 <HAL_RCC_OscConfig+0x8b2>
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10c      	bne.n	8001fda <HAL_RCC_OscConfig+0x876>
 8001fc0:	4b34      	ldr	r3, [pc, #208]	; (8002094 <HAL_RCC_OscConfig+0x930>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	4a33      	ldr	r2, [pc, #204]	; (8002094 <HAL_RCC_OscConfig+0x930>)
 8001fc6:	f023 0301 	bic.w	r3, r3, #1
 8001fca:	6213      	str	r3, [r2, #32]
 8001fcc:	4b31      	ldr	r3, [pc, #196]	; (8002094 <HAL_RCC_OscConfig+0x930>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4a30      	ldr	r2, [pc, #192]	; (8002094 <HAL_RCC_OscConfig+0x930>)
 8001fd2:	f023 0304 	bic.w	r3, r3, #4
 8001fd6:	6213      	str	r3, [r2, #32]
 8001fd8:	e01d      	b.n	8002016 <HAL_RCC_OscConfig+0x8b2>
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b05      	cmp	r3, #5
 8001fe2:	d10c      	bne.n	8001ffe <HAL_RCC_OscConfig+0x89a>
 8001fe4:	4b2b      	ldr	r3, [pc, #172]	; (8002094 <HAL_RCC_OscConfig+0x930>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4a2a      	ldr	r2, [pc, #168]	; (8002094 <HAL_RCC_OscConfig+0x930>)
 8001fea:	f043 0304 	orr.w	r3, r3, #4
 8001fee:	6213      	str	r3, [r2, #32]
 8001ff0:	4b28      	ldr	r3, [pc, #160]	; (8002094 <HAL_RCC_OscConfig+0x930>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	4a27      	ldr	r2, [pc, #156]	; (8002094 <HAL_RCC_OscConfig+0x930>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6213      	str	r3, [r2, #32]
 8001ffc:	e00b      	b.n	8002016 <HAL_RCC_OscConfig+0x8b2>
 8001ffe:	4b25      	ldr	r3, [pc, #148]	; (8002094 <HAL_RCC_OscConfig+0x930>)
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	4a24      	ldr	r2, [pc, #144]	; (8002094 <HAL_RCC_OscConfig+0x930>)
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	6213      	str	r3, [r2, #32]
 800200a:	4b22      	ldr	r3, [pc, #136]	; (8002094 <HAL_RCC_OscConfig+0x930>)
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	4a21      	ldr	r2, [pc, #132]	; (8002094 <HAL_RCC_OscConfig+0x930>)
 8002010:	f023 0304 	bic.w	r3, r3, #4
 8002014:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d06b      	beq.n	80020f8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002020:	f7ff f802 	bl	8001028 <HAL_GetTick>
 8002024:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002028:	e00b      	b.n	8002042 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f7fe fffd 	bl	8001028 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	; 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e291      	b.n	8002566 <HAL_RCC_OscConfig+0xe02>
 8002042:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002046:	2202      	movs	r2, #2
 8002048:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	fa93 f2a3 	rbit	r2, r3
 8002054:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800205e:	2202      	movs	r2, #2
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	fa93 f2a3 	rbit	r2, r3
 800206c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002070:	601a      	str	r2, [r3, #0]
  return result;
 8002072:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002076:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002078:	fab3 f383 	clz	r3, r3
 800207c:	b2db      	uxtb	r3, r3
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	b2db      	uxtb	r3, r3
 8002082:	f043 0302 	orr.w	r3, r3, #2
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d109      	bne.n	80020a0 <HAL_RCC_OscConfig+0x93c>
 800208c:	4b01      	ldr	r3, [pc, #4]	; (8002094 <HAL_RCC_OscConfig+0x930>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	e014      	b.n	80020bc <HAL_RCC_OscConfig+0x958>
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	10908120 	.word	0x10908120
 800209c:	40007000 	.word	0x40007000
 80020a0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80020a4:	2202      	movs	r2, #2
 80020a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	fa93 f2a3 	rbit	r2, r3
 80020b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	4bbb      	ldr	r3, [pc, #748]	; (80023a8 <HAL_RCC_OscConfig+0xc44>)
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80020c0:	2102      	movs	r1, #2
 80020c2:	6011      	str	r1, [r2, #0]
 80020c4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	fa92 f1a2 	rbit	r1, r2
 80020ce:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80020d2:	6011      	str	r1, [r2, #0]
  return result;
 80020d4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80020d8:	6812      	ldr	r2, [r2, #0]
 80020da:	fab2 f282 	clz	r2, r2
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	f002 021f 	and.w	r2, r2, #31
 80020ea:	2101      	movs	r1, #1
 80020ec:	fa01 f202 	lsl.w	r2, r1, r2
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d099      	beq.n	800202a <HAL_RCC_OscConfig+0x8c6>
 80020f6:	e063      	b.n	80021c0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f8:	f7fe ff96 	bl	8001028 <HAL_GetTick>
 80020fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002100:	e00b      	b.n	800211a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002102:	f7fe ff91 	bl	8001028 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e225      	b.n	8002566 <HAL_RCC_OscConfig+0xe02>
 800211a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800211e:	2202      	movs	r2, #2
 8002120:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	fa93 f2a3 	rbit	r2, r3
 800212c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002136:	2202      	movs	r2, #2
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	fa93 f2a3 	rbit	r2, r3
 8002144:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002148:	601a      	str	r2, [r3, #0]
  return result;
 800214a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800214e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002150:	fab3 f383 	clz	r3, r3
 8002154:	b2db      	uxtb	r3, r3
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	b2db      	uxtb	r3, r3
 800215a:	f043 0302 	orr.w	r3, r3, #2
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d102      	bne.n	800216a <HAL_RCC_OscConfig+0xa06>
 8002164:	4b90      	ldr	r3, [pc, #576]	; (80023a8 <HAL_RCC_OscConfig+0xc44>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	e00d      	b.n	8002186 <HAL_RCC_OscConfig+0xa22>
 800216a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800216e:	2202      	movs	r2, #2
 8002170:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	fa93 f2a3 	rbit	r2, r3
 800217c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	4b89      	ldr	r3, [pc, #548]	; (80023a8 <HAL_RCC_OscConfig+0xc44>)
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800218a:	2102      	movs	r1, #2
 800218c:	6011      	str	r1, [r2, #0]
 800218e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	fa92 f1a2 	rbit	r1, r2
 8002198:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800219c:	6011      	str	r1, [r2, #0]
  return result;
 800219e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	fab2 f282 	clz	r2, r2
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	f002 021f 	and.w	r2, r2, #31
 80021b4:	2101      	movs	r1, #1
 80021b6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1a0      	bne.n	8002102 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021c0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d105      	bne.n	80021d4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c8:	4b77      	ldr	r3, [pc, #476]	; (80023a8 <HAL_RCC_OscConfig+0xc44>)
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	4a76      	ldr	r2, [pc, #472]	; (80023a8 <HAL_RCC_OscConfig+0xc44>)
 80021ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 81c2 	beq.w	8002564 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e0:	4b71      	ldr	r3, [pc, #452]	; (80023a8 <HAL_RCC_OscConfig+0xc44>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 030c 	and.w	r3, r3, #12
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	f000 819c 	beq.w	8002526 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	f040 8114 	bne.w	8002422 <HAL_RCC_OscConfig+0xcbe>
 80021fa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80021fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002202:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002204:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	fa93 f2a3 	rbit	r2, r3
 800220e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002212:	601a      	str	r2, [r3, #0]
  return result;
 8002214:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002218:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002224:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	461a      	mov	r2, r3
 800222c:	2300      	movs	r3, #0
 800222e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7fe fefa 	bl	8001028 <HAL_GetTick>
 8002234:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002238:	e009      	b.n	800224e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223a:	f7fe fef5 	bl	8001028 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e18b      	b.n	8002566 <HAL_RCC_OscConfig+0xe02>
 800224e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002252:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002256:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002258:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	fa93 f2a3 	rbit	r2, r3
 8002262:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002266:	601a      	str	r2, [r3, #0]
  return result;
 8002268:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800226c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226e:	fab3 f383 	clz	r3, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	095b      	lsrs	r3, r3, #5
 8002276:	b2db      	uxtb	r3, r3
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b01      	cmp	r3, #1
 8002280:	d102      	bne.n	8002288 <HAL_RCC_OscConfig+0xb24>
 8002282:	4b49      	ldr	r3, [pc, #292]	; (80023a8 <HAL_RCC_OscConfig+0xc44>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	e01b      	b.n	80022c0 <HAL_RCC_OscConfig+0xb5c>
 8002288:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800228c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002290:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	fa93 f2a3 	rbit	r2, r3
 800229c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	fa93 f2a3 	rbit	r2, r3
 80022b6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	4b3a      	ldr	r3, [pc, #232]	; (80023a8 <HAL_RCC_OscConfig+0xc44>)
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80022c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022c8:	6011      	str	r1, [r2, #0]
 80022ca:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	fa92 f1a2 	rbit	r1, r2
 80022d4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80022d8:	6011      	str	r1, [r2, #0]
  return result;
 80022da:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	fab2 f282 	clz	r2, r2
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	f042 0220 	orr.w	r2, r2, #32
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	f002 021f 	and.w	r2, r2, #31
 80022f0:	2101      	movs	r1, #1
 80022f2:	fa01 f202 	lsl.w	r2, r1, r2
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d19e      	bne.n	800223a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022fc:	4b2a      	ldr	r3, [pc, #168]	; (80023a8 <HAL_RCC_OscConfig+0xc44>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002304:	1d3b      	adds	r3, r7, #4
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800230a:	1d3b      	adds	r3, r7, #4
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	430b      	orrs	r3, r1
 8002312:	4925      	ldr	r1, [pc, #148]	; (80023a8 <HAL_RCC_OscConfig+0xc44>)
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]
 8002318:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800231c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002320:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	fa93 f2a3 	rbit	r2, r3
 800232c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002330:	601a      	str	r2, [r3, #0]
  return result;
 8002332:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002336:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002338:	fab3 f383 	clz	r3, r3
 800233c:	b2db      	uxtb	r3, r3
 800233e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002342:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	461a      	mov	r2, r3
 800234a:	2301      	movs	r3, #1
 800234c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234e:	f7fe fe6b 	bl	8001028 <HAL_GetTick>
 8002352:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002356:	e009      	b.n	800236c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002358:	f7fe fe66 	bl	8001028 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e0fc      	b.n	8002566 <HAL_RCC_OscConfig+0xe02>
 800236c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002370:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002374:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	fa93 f2a3 	rbit	r2, r3
 8002380:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002384:	601a      	str	r2, [r3, #0]
  return result;
 8002386:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800238a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800238c:	fab3 f383 	clz	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b01      	cmp	r3, #1
 800239e:	d105      	bne.n	80023ac <HAL_RCC_OscConfig+0xc48>
 80023a0:	4b01      	ldr	r3, [pc, #4]	; (80023a8 <HAL_RCC_OscConfig+0xc44>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	e01e      	b.n	80023e4 <HAL_RCC_OscConfig+0xc80>
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
 80023ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	fa93 f2a3 	rbit	r2, r3
 80023c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	fa93 f2a3 	rbit	r2, r3
 80023da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	4b63      	ldr	r3, [pc, #396]	; (8002570 <HAL_RCC_OscConfig+0xe0c>)
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023ec:	6011      	str	r1, [r2, #0]
 80023ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	fa92 f1a2 	rbit	r1, r2
 80023f8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80023fc:	6011      	str	r1, [r2, #0]
  return result;
 80023fe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	fab2 f282 	clz	r2, r2
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	f042 0220 	orr.w	r2, r2, #32
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	f002 021f 	and.w	r2, r2, #31
 8002414:	2101      	movs	r1, #1
 8002416:	fa01 f202 	lsl.w	r2, r1, r2
 800241a:	4013      	ands	r3, r2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d09b      	beq.n	8002358 <HAL_RCC_OscConfig+0xbf4>
 8002420:	e0a0      	b.n	8002564 <HAL_RCC_OscConfig+0xe00>
 8002422:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002426:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800242a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	fa93 f2a3 	rbit	r2, r3
 8002436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800243a:	601a      	str	r2, [r3, #0]
  return result;
 800243c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002440:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800244c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	461a      	mov	r2, r3
 8002454:	2300      	movs	r3, #0
 8002456:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7fe fde6 	bl	8001028 <HAL_GetTick>
 800245c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002460:	e009      	b.n	8002476 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002462:	f7fe fde1 	bl	8001028 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e077      	b.n	8002566 <HAL_RCC_OscConfig+0xe02>
 8002476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800247a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800247e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	fa93 f2a3 	rbit	r2, r3
 800248a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800248e:	601a      	str	r2, [r3, #0]
  return result;
 8002490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002494:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002496:	fab3 f383 	clz	r3, r3
 800249a:	b2db      	uxtb	r3, r3
 800249c:	095b      	lsrs	r3, r3, #5
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d102      	bne.n	80024b0 <HAL_RCC_OscConfig+0xd4c>
 80024aa:	4b31      	ldr	r3, [pc, #196]	; (8002570 <HAL_RCC_OscConfig+0xe0c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	e01b      	b.n	80024e8 <HAL_RCC_OscConfig+0xd84>
 80024b0:	f107 0320 	add.w	r3, r7, #32
 80024b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	f107 0320 	add.w	r3, r7, #32
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	fa93 f2a3 	rbit	r2, r3
 80024c4:	f107 031c 	add.w	r3, r7, #28
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	f107 0318 	add.w	r3, r7, #24
 80024ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	f107 0318 	add.w	r3, r7, #24
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	fa93 f2a3 	rbit	r2, r3
 80024de:	f107 0314 	add.w	r3, r7, #20
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	4b22      	ldr	r3, [pc, #136]	; (8002570 <HAL_RCC_OscConfig+0xe0c>)
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	f107 0210 	add.w	r2, r7, #16
 80024ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024f0:	6011      	str	r1, [r2, #0]
 80024f2:	f107 0210 	add.w	r2, r7, #16
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	fa92 f1a2 	rbit	r1, r2
 80024fc:	f107 020c 	add.w	r2, r7, #12
 8002500:	6011      	str	r1, [r2, #0]
  return result;
 8002502:	f107 020c 	add.w	r2, r7, #12
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	fab2 f282 	clz	r2, r2
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	f042 0220 	orr.w	r2, r2, #32
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	f002 021f 	and.w	r2, r2, #31
 8002518:	2101      	movs	r1, #1
 800251a:	fa01 f202 	lsl.w	r2, r1, r2
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d19e      	bne.n	8002462 <HAL_RCC_OscConfig+0xcfe>
 8002524:	e01e      	b.n	8002564 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002526:	1d3b      	adds	r3, r7, #4
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e018      	b.n	8002566 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002534:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <HAL_RCC_OscConfig+0xe0c>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800253c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002540:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002544:	1d3b      	adds	r3, r7, #4
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	429a      	cmp	r2, r3
 800254c:	d108      	bne.n	8002560 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800254e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002552:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800255c:	429a      	cmp	r2, r3
 800255e:	d001      	beq.n	8002564 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40021000 	.word	0x40021000

08002574 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b09e      	sub	sp, #120	; 0x78
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800257e:	2300      	movs	r3, #0
 8002580:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e162      	b.n	8002852 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800258c:	4b90      	ldr	r3, [pc, #576]	; (80027d0 <HAL_RCC_ClockConfig+0x25c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d910      	bls.n	80025bc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259a:	4b8d      	ldr	r3, [pc, #564]	; (80027d0 <HAL_RCC_ClockConfig+0x25c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 0207 	bic.w	r2, r3, #7
 80025a2:	498b      	ldr	r1, [pc, #556]	; (80027d0 <HAL_RCC_ClockConfig+0x25c>)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b89      	ldr	r3, [pc, #548]	; (80027d0 <HAL_RCC_ClockConfig+0x25c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e14a      	b.n	8002852 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c8:	4b82      	ldr	r3, [pc, #520]	; (80027d4 <HAL_RCC_ClockConfig+0x260>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	497f      	ldr	r1, [pc, #508]	; (80027d4 <HAL_RCC_ClockConfig+0x260>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 80dc 	beq.w	80027a0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d13c      	bne.n	800266a <HAL_RCC_ClockConfig+0xf6>
 80025f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025f4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80025fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002600:	fab3 f383 	clz	r3, r3
 8002604:	b2db      	uxtb	r3, r3
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	b2db      	uxtb	r3, r3
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b01      	cmp	r3, #1
 8002612:	d102      	bne.n	800261a <HAL_RCC_ClockConfig+0xa6>
 8002614:	4b6f      	ldr	r3, [pc, #444]	; (80027d4 <HAL_RCC_ClockConfig+0x260>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	e00f      	b.n	800263a <HAL_RCC_ClockConfig+0xc6>
 800261a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800261e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002622:	fa93 f3a3 	rbit	r3, r3
 8002626:	667b      	str	r3, [r7, #100]	; 0x64
 8002628:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800262c:	663b      	str	r3, [r7, #96]	; 0x60
 800262e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002630:	fa93 f3a3 	rbit	r3, r3
 8002634:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002636:	4b67      	ldr	r3, [pc, #412]	; (80027d4 <HAL_RCC_ClockConfig+0x260>)
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800263e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002640:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002642:	fa92 f2a2 	rbit	r2, r2
 8002646:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002648:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800264a:	fab2 f282 	clz	r2, r2
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	f042 0220 	orr.w	r2, r2, #32
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	f002 021f 	and.w	r2, r2, #31
 800265a:	2101      	movs	r1, #1
 800265c:	fa01 f202 	lsl.w	r2, r1, r2
 8002660:	4013      	ands	r3, r2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d17b      	bne.n	800275e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e0f3      	b.n	8002852 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d13c      	bne.n	80026ec <HAL_RCC_ClockConfig+0x178>
 8002672:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002676:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800267a:	fa93 f3a3 	rbit	r3, r3
 800267e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	095b      	lsrs	r3, r3, #5
 800268a:	b2db      	uxtb	r3, r3
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b01      	cmp	r3, #1
 8002694:	d102      	bne.n	800269c <HAL_RCC_ClockConfig+0x128>
 8002696:	4b4f      	ldr	r3, [pc, #316]	; (80027d4 <HAL_RCC_ClockConfig+0x260>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	e00f      	b.n	80026bc <HAL_RCC_ClockConfig+0x148>
 800269c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	647b      	str	r3, [r7, #68]	; 0x44
 80026aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ae:	643b      	str	r3, [r7, #64]	; 0x40
 80026b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026b8:	4b46      	ldr	r3, [pc, #280]	; (80027d4 <HAL_RCC_ClockConfig+0x260>)
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026c0:	63ba      	str	r2, [r7, #56]	; 0x38
 80026c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026c4:	fa92 f2a2 	rbit	r2, r2
 80026c8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80026ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026cc:	fab2 f282 	clz	r2, r2
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	f042 0220 	orr.w	r2, r2, #32
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	f002 021f 	and.w	r2, r2, #31
 80026dc:	2101      	movs	r1, #1
 80026de:	fa01 f202 	lsl.w	r2, r1, r2
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d13a      	bne.n	800275e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0b2      	b.n	8002852 <HAL_RCC_ClockConfig+0x2de>
 80026ec:	2302      	movs	r3, #2
 80026ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80026f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	095b      	lsrs	r3, r3, #5
 8002702:	b2db      	uxtb	r3, r3
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d102      	bne.n	8002714 <HAL_RCC_ClockConfig+0x1a0>
 800270e:	4b31      	ldr	r3, [pc, #196]	; (80027d4 <HAL_RCC_ClockConfig+0x260>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	e00d      	b.n	8002730 <HAL_RCC_ClockConfig+0x1bc>
 8002714:	2302      	movs	r3, #2
 8002716:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
 8002720:	2302      	movs	r3, #2
 8002722:	623b      	str	r3, [r7, #32]
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	61fb      	str	r3, [r7, #28]
 800272c:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <HAL_RCC_ClockConfig+0x260>)
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	2202      	movs	r2, #2
 8002732:	61ba      	str	r2, [r7, #24]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	fa92 f2a2 	rbit	r2, r2
 800273a:	617a      	str	r2, [r7, #20]
  return result;
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	fab2 f282 	clz	r2, r2
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	f042 0220 	orr.w	r2, r2, #32
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	f002 021f 	and.w	r2, r2, #31
 800274e:	2101      	movs	r1, #1
 8002750:	fa01 f202 	lsl.w	r2, r1, r2
 8002754:	4013      	ands	r3, r2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e079      	b.n	8002852 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800275e:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <HAL_RCC_ClockConfig+0x260>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f023 0203 	bic.w	r2, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	491a      	ldr	r1, [pc, #104]	; (80027d4 <HAL_RCC_ClockConfig+0x260>)
 800276c:	4313      	orrs	r3, r2
 800276e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002770:	f7fe fc5a 	bl	8001028 <HAL_GetTick>
 8002774:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002776:	e00a      	b.n	800278e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002778:	f7fe fc56 	bl	8001028 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f241 3288 	movw	r2, #5000	; 0x1388
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e061      	b.n	8002852 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_RCC_ClockConfig+0x260>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 020c 	and.w	r2, r3, #12
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	429a      	cmp	r2, r3
 800279e:	d1eb      	bne.n	8002778 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_RCC_ClockConfig+0x25c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d214      	bcs.n	80027d8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <HAL_RCC_ClockConfig+0x25c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 0207 	bic.w	r2, r3, #7
 80027b6:	4906      	ldr	r1, [pc, #24]	; (80027d0 <HAL_RCC_ClockConfig+0x25c>)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <HAL_RCC_ClockConfig+0x25c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d005      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e040      	b.n	8002852 <HAL_RCC_ClockConfig+0x2de>
 80027d0:	40022000 	.word	0x40022000
 80027d4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e4:	4b1d      	ldr	r3, [pc, #116]	; (800285c <HAL_RCC_ClockConfig+0x2e8>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	491a      	ldr	r1, [pc, #104]	; (800285c <HAL_RCC_ClockConfig+0x2e8>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002802:	4b16      	ldr	r3, [pc, #88]	; (800285c <HAL_RCC_ClockConfig+0x2e8>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4912      	ldr	r1, [pc, #72]	; (800285c <HAL_RCC_ClockConfig+0x2e8>)
 8002812:	4313      	orrs	r3, r2
 8002814:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002816:	f000 f829 	bl	800286c <HAL_RCC_GetSysClockFreq>
 800281a:	4601      	mov	r1, r0
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <HAL_RCC_ClockConfig+0x2e8>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002824:	22f0      	movs	r2, #240	; 0xf0
 8002826:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	fa92 f2a2 	rbit	r2, r2
 800282e:	60fa      	str	r2, [r7, #12]
  return result;
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	fab2 f282 	clz	r2, r2
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	40d3      	lsrs	r3, r2
 800283a:	4a09      	ldr	r2, [pc, #36]	; (8002860 <HAL_RCC_ClockConfig+0x2ec>)
 800283c:	5cd3      	ldrb	r3, [r2, r3]
 800283e:	fa21 f303 	lsr.w	r3, r1, r3
 8002842:	4a08      	ldr	r2, [pc, #32]	; (8002864 <HAL_RCC_ClockConfig+0x2f0>)
 8002844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <HAL_RCC_ClockConfig+0x2f4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe fba8 	bl	8000fa0 <HAL_InitTick>
  
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3778      	adds	r7, #120	; 0x78
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40021000 	.word	0x40021000
 8002860:	08003f68 	.word	0x08003f68
 8002864:	20000000 	.word	0x20000000
 8002868:	20000004 	.word	0x20000004

0800286c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800286c:	b480      	push	{r7}
 800286e:	b08b      	sub	sp, #44	; 0x2c
 8002870:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	2300      	movs	r3, #0
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	2300      	movs	r3, #0
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002886:	4b29      	ldr	r3, [pc, #164]	; (800292c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	2b04      	cmp	r3, #4
 8002894:	d002      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0x30>
 8002896:	2b08      	cmp	r3, #8
 8002898:	d003      	beq.n	80028a2 <HAL_RCC_GetSysClockFreq+0x36>
 800289a:	e03c      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800289c:	4b24      	ldr	r3, [pc, #144]	; (8002930 <HAL_RCC_GetSysClockFreq+0xc4>)
 800289e:	623b      	str	r3, [r7, #32]
      break;
 80028a0:	e03c      	b.n	800291c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80028a8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80028ac:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	fa92 f2a2 	rbit	r2, r2
 80028b4:	607a      	str	r2, [r7, #4]
  return result;
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	fab2 f282 	clz	r2, r2
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	40d3      	lsrs	r3, r2
 80028c0:	4a1c      	ldr	r2, [pc, #112]	; (8002934 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028c2:	5cd3      	ldrb	r3, [r2, r3]
 80028c4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80028c6:	4b19      	ldr	r3, [pc, #100]	; (800292c <HAL_RCC_GetSysClockFreq+0xc0>)
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	220f      	movs	r2, #15
 80028d0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	fa92 f2a2 	rbit	r2, r2
 80028d8:	60fa      	str	r2, [r7, #12]
  return result;
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	fab2 f282 	clz	r2, r2
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	40d3      	lsrs	r3, r2
 80028e4:	4a14      	ldr	r2, [pc, #80]	; (8002938 <HAL_RCC_GetSysClockFreq+0xcc>)
 80028e6:	5cd3      	ldrb	r3, [r2, r3]
 80028e8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d008      	beq.n	8002906 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028f4:	4a0e      	ldr	r2, [pc, #56]	; (8002930 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	fb02 f303 	mul.w	r3, r2, r3
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
 8002904:	e004      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	4a0c      	ldr	r2, [pc, #48]	; (800293c <HAL_RCC_GetSysClockFreq+0xd0>)
 800290a:	fb02 f303 	mul.w	r3, r2, r3
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	623b      	str	r3, [r7, #32]
      break;
 8002914:	e002      	b.n	800291c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002916:	4b06      	ldr	r3, [pc, #24]	; (8002930 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002918:	623b      	str	r3, [r7, #32]
      break;
 800291a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800291c:	6a3b      	ldr	r3, [r7, #32]
}
 800291e:	4618      	mov	r0, r3
 8002920:	372c      	adds	r7, #44	; 0x2c
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40021000 	.word	0x40021000
 8002930:	007a1200 	.word	0x007a1200
 8002934:	08003f80 	.word	0x08003f80
 8002938:	08003f90 	.word	0x08003f90
 800293c:	003d0900 	.word	0x003d0900

08002940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002944:	4b03      	ldr	r3, [pc, #12]	; (8002954 <HAL_RCC_GetHCLKFreq+0x14>)
 8002946:	681b      	ldr	r3, [r3, #0]
}
 8002948:	4618      	mov	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	20000000 	.word	0x20000000

08002958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800295e:	f7ff ffef 	bl	8002940 <HAL_RCC_GetHCLKFreq>
 8002962:	4601      	mov	r1, r0
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800296c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002970:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	fa92 f2a2 	rbit	r2, r2
 8002978:	603a      	str	r2, [r7, #0]
  return result;
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	fab2 f282 	clz	r2, r2
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	40d3      	lsrs	r3, r2
 8002984:	4a04      	ldr	r2, [pc, #16]	; (8002998 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002986:	5cd3      	ldrb	r3, [r2, r3]
 8002988:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40021000 	.word	0x40021000
 8002998:	08003f78 	.word	0x08003f78

0800299c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80029a2:	f7ff ffcd 	bl	8002940 <HAL_RCC_GetHCLKFreq>
 80029a6:	4601      	mov	r1, r0
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80029b0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80029b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	fa92 f2a2 	rbit	r2, r2
 80029bc:	603a      	str	r2, [r7, #0]
  return result;
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	fab2 f282 	clz	r2, r2
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	40d3      	lsrs	r3, r2
 80029c8:	4a04      	ldr	r2, [pc, #16]	; (80029dc <HAL_RCC_GetPCLK2Freq+0x40>)
 80029ca:	5cd3      	ldrb	r3, [r2, r3]
 80029cc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80029d0:	4618      	mov	r0, r3
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40021000 	.word	0x40021000
 80029dc:	08003f78 	.word	0x08003f78

080029e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b092      	sub	sp, #72	; 0x48
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80029f0:	2300      	movs	r3, #0
 80029f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 80d4 	beq.w	8002bac <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a04:	4b4e      	ldr	r3, [pc, #312]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10e      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a10:	4b4b      	ldr	r3, [pc, #300]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	4a4a      	ldr	r2, [pc, #296]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	61d3      	str	r3, [r2, #28]
 8002a1c:	4b48      	ldr	r3, [pc, #288]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2e:	4b45      	ldr	r3, [pc, #276]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d118      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a3a:	4b42      	ldr	r3, [pc, #264]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a41      	ldr	r2, [pc, #260]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a44:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a46:	f7fe faef 	bl	8001028 <HAL_GetTick>
 8002a4a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4c:	e008      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4e:	f7fe faeb 	bl	8001028 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b64      	cmp	r3, #100	; 0x64
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e169      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a60:	4b38      	ldr	r3, [pc, #224]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0f0      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a6c:	4b34      	ldr	r3, [pc, #208]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a74:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 8084 	beq.w	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d07c      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a8c:	4b2c      	ldr	r3, [pc, #176]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9e:	fa93 f3a3 	rbit	r3, r3
 8002aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	4b26      	ldr	r3, [pc, #152]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002abe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	461a      	mov	r2, r3
 8002ada:	2300      	movs	r3, #0
 8002adc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ade:	4a18      	ldr	r2, [pc, #96]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d04b      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aee:	f7fe fa9b 	bl	8001028 <HAL_GetTick>
 8002af2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af4:	e00a      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af6:	f7fe fa97 	bl	8001028 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e113      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
 8002b18:	2302      	movs	r3, #2
 8002b1a:	623b      	str	r3, [r7, #32]
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	61fb      	str	r3, [r7, #28]
  return result;
 8002b24:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	095b      	lsrs	r3, r3, #5
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	f043 0302 	orr.w	r3, r3, #2
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d108      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002b3a:	4b01      	ldr	r3, [pc, #4]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	e00d      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40007000 	.word	0x40007000
 8002b48:	10908100 	.word	0x10908100
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	4b78      	ldr	r3, [pc, #480]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	613a      	str	r2, [r7, #16]
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	fa92 f2a2 	rbit	r2, r2
 8002b66:	60fa      	str	r2, [r7, #12]
  return result;
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	fab2 f282 	clz	r2, r2
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	f002 021f 	and.w	r2, r2, #31
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0b7      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b86:	4b6d      	ldr	r3, [pc, #436]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	496a      	ldr	r1, [pc, #424]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d105      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba0:	4b66      	ldr	r3, [pc, #408]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	4a65      	ldr	r2, [pc, #404]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002baa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bb8:	4b60      	ldr	r3, [pc, #384]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	f023 0203 	bic.w	r2, r3, #3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	495d      	ldr	r1, [pc, #372]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d008      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bd6:	4b59      	ldr	r3, [pc, #356]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	4956      	ldr	r1, [pc, #344]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bf4:	4b51      	ldr	r3, [pc, #324]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	494e      	ldr	r1, [pc, #312]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0320 	and.w	r3, r3, #32
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d008      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c12:	4b4a      	ldr	r3, [pc, #296]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	f023 0210 	bic.w	r2, r3, #16
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	4947      	ldr	r1, [pc, #284]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002c30:	4b42      	ldr	r3, [pc, #264]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3c:	493f      	ldr	r1, [pc, #252]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d008      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c4e:	4b3b      	ldr	r3, [pc, #236]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f023 0220 	bic.w	r2, r3, #32
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	4938      	ldr	r1, [pc, #224]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c6c:	4b33      	ldr	r3, [pc, #204]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	4930      	ldr	r1, [pc, #192]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0310 	and.w	r3, r3, #16
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d008      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c8a:	4b2c      	ldr	r3, [pc, #176]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	4929      	ldr	r1, [pc, #164]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ca8:	4b24      	ldr	r3, [pc, #144]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	4921      	ldr	r1, [pc, #132]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d008      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002cc6:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cca:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	491a      	ldr	r1, [pc, #104]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002ce4:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf0:	4912      	ldr	r1, [pc, #72]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d008      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002d02:	4b0e      	ldr	r3, [pc, #56]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	490b      	ldr	r1, [pc, #44]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2c:	4903      	ldr	r1, [pc, #12]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3748      	adds	r7, #72	; 0x48
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40021000 	.word	0x40021000

08002d40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e040      	b.n	8002dd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fd ffe2 	bl	8000d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2224      	movs	r2, #36	; 0x24
 8002d6c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0201 	bic.w	r2, r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f8c0 	bl	8002f04 <UART_SetConfig>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e022      	b.n	8002dd4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fa88 	bl	80032ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002daa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
 8002dca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 fb0f 	bl	80033f0 <UART_CheckIdleState>
 8002dd2:	4603      	mov	r3, r0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	4613      	mov	r3, r2
 8002dea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002df0:	2b20      	cmp	r3, #32
 8002df2:	f040 8082 	bne.w	8002efa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <HAL_UART_Transmit+0x26>
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e07a      	b.n	8002efc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_UART_Transmit+0x38>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e073      	b.n	8002efc <HAL_UART_Transmit+0x120>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2221      	movs	r2, #33	; 0x21
 8002e28:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e2a:	f7fe f8fd 	bl	8001028 <HAL_GetTick>
 8002e2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	88fa      	ldrh	r2, [r7, #6]
 8002e34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	88fa      	ldrh	r2, [r7, #6]
 8002e3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e48:	d108      	bne.n	8002e5c <HAL_UART_Transmit+0x80>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d104      	bne.n	8002e5c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	61bb      	str	r3, [r7, #24]
 8002e5a:	e003      	b.n	8002e64 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002e6c:	e02d      	b.n	8002eca <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2200      	movs	r2, #0
 8002e76:	2180      	movs	r1, #128	; 0x80
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 fb02 	bl	8003482 <UART_WaitOnFlagUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e039      	b.n	8002efc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10b      	bne.n	8002ea6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	881a      	ldrh	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e9a:	b292      	uxth	r2, r2
 8002e9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	3302      	adds	r3, #2
 8002ea2:	61bb      	str	r3, [r7, #24]
 8002ea4:	e008      	b.n	8002eb8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	781a      	ldrb	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	b292      	uxth	r2, r2
 8002eb0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1cb      	bne.n	8002e6e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2200      	movs	r2, #0
 8002ede:	2140      	movs	r1, #64	; 0x40
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 face 	bl	8003482 <UART_WaitOnFlagUntilTimeout>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e005      	b.n	8002efc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e000      	b.n	8002efc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002efa:	2302      	movs	r3, #2
  }
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3720      	adds	r7, #32
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f32:	f023 030c 	bic.w	r3, r3, #12
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6812      	ldr	r2, [r2, #0]
 8002f3a:	6979      	ldr	r1, [r7, #20]
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4aae      	ldr	r2, [pc, #696]	; (8003238 <UART_SetConfig+0x334>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d120      	bne.n	8002fc6 <UART_SetConfig+0xc2>
 8002f84:	4bad      	ldr	r3, [pc, #692]	; (800323c <UART_SetConfig+0x338>)
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d817      	bhi.n	8002fc0 <UART_SetConfig+0xbc>
 8002f90:	a201      	add	r2, pc, #4	; (adr r2, 8002f98 <UART_SetConfig+0x94>)
 8002f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f96:	bf00      	nop
 8002f98:	08002fa9 	.word	0x08002fa9
 8002f9c:	08002fb5 	.word	0x08002fb5
 8002fa0:	08002fbb 	.word	0x08002fbb
 8002fa4:	08002faf 	.word	0x08002faf
 8002fa8:	2301      	movs	r3, #1
 8002faa:	77fb      	strb	r3, [r7, #31]
 8002fac:	e0b5      	b.n	800311a <UART_SetConfig+0x216>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	77fb      	strb	r3, [r7, #31]
 8002fb2:	e0b2      	b.n	800311a <UART_SetConfig+0x216>
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	77fb      	strb	r3, [r7, #31]
 8002fb8:	e0af      	b.n	800311a <UART_SetConfig+0x216>
 8002fba:	2308      	movs	r3, #8
 8002fbc:	77fb      	strb	r3, [r7, #31]
 8002fbe:	e0ac      	b.n	800311a <UART_SetConfig+0x216>
 8002fc0:	2310      	movs	r3, #16
 8002fc2:	77fb      	strb	r3, [r7, #31]
 8002fc4:	e0a9      	b.n	800311a <UART_SetConfig+0x216>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a9d      	ldr	r2, [pc, #628]	; (8003240 <UART_SetConfig+0x33c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d124      	bne.n	800301a <UART_SetConfig+0x116>
 8002fd0:	4b9a      	ldr	r3, [pc, #616]	; (800323c <UART_SetConfig+0x338>)
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fd8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fdc:	d011      	beq.n	8003002 <UART_SetConfig+0xfe>
 8002fde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fe2:	d817      	bhi.n	8003014 <UART_SetConfig+0x110>
 8002fe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fe8:	d011      	beq.n	800300e <UART_SetConfig+0x10a>
 8002fea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fee:	d811      	bhi.n	8003014 <UART_SetConfig+0x110>
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <UART_SetConfig+0xf8>
 8002ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff8:	d006      	beq.n	8003008 <UART_SetConfig+0x104>
 8002ffa:	e00b      	b.n	8003014 <UART_SetConfig+0x110>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	77fb      	strb	r3, [r7, #31]
 8003000:	e08b      	b.n	800311a <UART_SetConfig+0x216>
 8003002:	2302      	movs	r3, #2
 8003004:	77fb      	strb	r3, [r7, #31]
 8003006:	e088      	b.n	800311a <UART_SetConfig+0x216>
 8003008:	2304      	movs	r3, #4
 800300a:	77fb      	strb	r3, [r7, #31]
 800300c:	e085      	b.n	800311a <UART_SetConfig+0x216>
 800300e:	2308      	movs	r3, #8
 8003010:	77fb      	strb	r3, [r7, #31]
 8003012:	e082      	b.n	800311a <UART_SetConfig+0x216>
 8003014:	2310      	movs	r3, #16
 8003016:	77fb      	strb	r3, [r7, #31]
 8003018:	e07f      	b.n	800311a <UART_SetConfig+0x216>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a89      	ldr	r2, [pc, #548]	; (8003244 <UART_SetConfig+0x340>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d124      	bne.n	800306e <UART_SetConfig+0x16a>
 8003024:	4b85      	ldr	r3, [pc, #532]	; (800323c <UART_SetConfig+0x338>)
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800302c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003030:	d011      	beq.n	8003056 <UART_SetConfig+0x152>
 8003032:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003036:	d817      	bhi.n	8003068 <UART_SetConfig+0x164>
 8003038:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800303c:	d011      	beq.n	8003062 <UART_SetConfig+0x15e>
 800303e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003042:	d811      	bhi.n	8003068 <UART_SetConfig+0x164>
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <UART_SetConfig+0x14c>
 8003048:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800304c:	d006      	beq.n	800305c <UART_SetConfig+0x158>
 800304e:	e00b      	b.n	8003068 <UART_SetConfig+0x164>
 8003050:	2300      	movs	r3, #0
 8003052:	77fb      	strb	r3, [r7, #31]
 8003054:	e061      	b.n	800311a <UART_SetConfig+0x216>
 8003056:	2302      	movs	r3, #2
 8003058:	77fb      	strb	r3, [r7, #31]
 800305a:	e05e      	b.n	800311a <UART_SetConfig+0x216>
 800305c:	2304      	movs	r3, #4
 800305e:	77fb      	strb	r3, [r7, #31]
 8003060:	e05b      	b.n	800311a <UART_SetConfig+0x216>
 8003062:	2308      	movs	r3, #8
 8003064:	77fb      	strb	r3, [r7, #31]
 8003066:	e058      	b.n	800311a <UART_SetConfig+0x216>
 8003068:	2310      	movs	r3, #16
 800306a:	77fb      	strb	r3, [r7, #31]
 800306c:	e055      	b.n	800311a <UART_SetConfig+0x216>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a75      	ldr	r2, [pc, #468]	; (8003248 <UART_SetConfig+0x344>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d124      	bne.n	80030c2 <UART_SetConfig+0x1be>
 8003078:	4b70      	ldr	r3, [pc, #448]	; (800323c <UART_SetConfig+0x338>)
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003080:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003084:	d011      	beq.n	80030aa <UART_SetConfig+0x1a6>
 8003086:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800308a:	d817      	bhi.n	80030bc <UART_SetConfig+0x1b8>
 800308c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003090:	d011      	beq.n	80030b6 <UART_SetConfig+0x1b2>
 8003092:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003096:	d811      	bhi.n	80030bc <UART_SetConfig+0x1b8>
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <UART_SetConfig+0x1a0>
 800309c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030a0:	d006      	beq.n	80030b0 <UART_SetConfig+0x1ac>
 80030a2:	e00b      	b.n	80030bc <UART_SetConfig+0x1b8>
 80030a4:	2300      	movs	r3, #0
 80030a6:	77fb      	strb	r3, [r7, #31]
 80030a8:	e037      	b.n	800311a <UART_SetConfig+0x216>
 80030aa:	2302      	movs	r3, #2
 80030ac:	77fb      	strb	r3, [r7, #31]
 80030ae:	e034      	b.n	800311a <UART_SetConfig+0x216>
 80030b0:	2304      	movs	r3, #4
 80030b2:	77fb      	strb	r3, [r7, #31]
 80030b4:	e031      	b.n	800311a <UART_SetConfig+0x216>
 80030b6:	2308      	movs	r3, #8
 80030b8:	77fb      	strb	r3, [r7, #31]
 80030ba:	e02e      	b.n	800311a <UART_SetConfig+0x216>
 80030bc:	2310      	movs	r3, #16
 80030be:	77fb      	strb	r3, [r7, #31]
 80030c0:	e02b      	b.n	800311a <UART_SetConfig+0x216>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a61      	ldr	r2, [pc, #388]	; (800324c <UART_SetConfig+0x348>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d124      	bne.n	8003116 <UART_SetConfig+0x212>
 80030cc:	4b5b      	ldr	r3, [pc, #364]	; (800323c <UART_SetConfig+0x338>)
 80030ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80030d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030d8:	d011      	beq.n	80030fe <UART_SetConfig+0x1fa>
 80030da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030de:	d817      	bhi.n	8003110 <UART_SetConfig+0x20c>
 80030e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030e4:	d011      	beq.n	800310a <UART_SetConfig+0x206>
 80030e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030ea:	d811      	bhi.n	8003110 <UART_SetConfig+0x20c>
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <UART_SetConfig+0x1f4>
 80030f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030f4:	d006      	beq.n	8003104 <UART_SetConfig+0x200>
 80030f6:	e00b      	b.n	8003110 <UART_SetConfig+0x20c>
 80030f8:	2300      	movs	r3, #0
 80030fa:	77fb      	strb	r3, [r7, #31]
 80030fc:	e00d      	b.n	800311a <UART_SetConfig+0x216>
 80030fe:	2302      	movs	r3, #2
 8003100:	77fb      	strb	r3, [r7, #31]
 8003102:	e00a      	b.n	800311a <UART_SetConfig+0x216>
 8003104:	2304      	movs	r3, #4
 8003106:	77fb      	strb	r3, [r7, #31]
 8003108:	e007      	b.n	800311a <UART_SetConfig+0x216>
 800310a:	2308      	movs	r3, #8
 800310c:	77fb      	strb	r3, [r7, #31]
 800310e:	e004      	b.n	800311a <UART_SetConfig+0x216>
 8003110:	2310      	movs	r3, #16
 8003112:	77fb      	strb	r3, [r7, #31]
 8003114:	e001      	b.n	800311a <UART_SetConfig+0x216>
 8003116:	2310      	movs	r3, #16
 8003118:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003122:	d15c      	bne.n	80031de <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8003124:	7ffb      	ldrb	r3, [r7, #31]
 8003126:	2b08      	cmp	r3, #8
 8003128:	d827      	bhi.n	800317a <UART_SetConfig+0x276>
 800312a:	a201      	add	r2, pc, #4	; (adr r2, 8003130 <UART_SetConfig+0x22c>)
 800312c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003130:	08003155 	.word	0x08003155
 8003134:	0800315d 	.word	0x0800315d
 8003138:	08003165 	.word	0x08003165
 800313c:	0800317b 	.word	0x0800317b
 8003140:	0800316b 	.word	0x0800316b
 8003144:	0800317b 	.word	0x0800317b
 8003148:	0800317b 	.word	0x0800317b
 800314c:	0800317b 	.word	0x0800317b
 8003150:	08003173 	.word	0x08003173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003154:	f7ff fc00 	bl	8002958 <HAL_RCC_GetPCLK1Freq>
 8003158:	61b8      	str	r0, [r7, #24]
        break;
 800315a:	e013      	b.n	8003184 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800315c:	f7ff fc1e 	bl	800299c <HAL_RCC_GetPCLK2Freq>
 8003160:	61b8      	str	r0, [r7, #24]
        break;
 8003162:	e00f      	b.n	8003184 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003164:	4b3a      	ldr	r3, [pc, #232]	; (8003250 <UART_SetConfig+0x34c>)
 8003166:	61bb      	str	r3, [r7, #24]
        break;
 8003168:	e00c      	b.n	8003184 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800316a:	f7ff fb7f 	bl	800286c <HAL_RCC_GetSysClockFreq>
 800316e:	61b8      	str	r0, [r7, #24]
        break;
 8003170:	e008      	b.n	8003184 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003176:	61bb      	str	r3, [r7, #24]
        break;
 8003178:	e004      	b.n	8003184 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	77bb      	strb	r3, [r7, #30]
        break;
 8003182:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 8085 	beq.w	8003296 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	005a      	lsls	r2, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	085b      	lsrs	r3, r3, #1
 8003196:	441a      	add	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2b0f      	cmp	r3, #15
 80031a8:	d916      	bls.n	80031d8 <UART_SetConfig+0x2d4>
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b0:	d212      	bcs.n	80031d8 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	f023 030f 	bic.w	r3, r3, #15
 80031ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	085b      	lsrs	r3, r3, #1
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	89fb      	ldrh	r3, [r7, #14]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	89fa      	ldrh	r2, [r7, #14]
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	e05e      	b.n	8003296 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	77bb      	strb	r3, [r7, #30]
 80031dc:	e05b      	b.n	8003296 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031de:	7ffb      	ldrb	r3, [r7, #31]
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d837      	bhi.n	8003254 <UART_SetConfig+0x350>
 80031e4:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <UART_SetConfig+0x2e8>)
 80031e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ea:	bf00      	nop
 80031ec:	08003211 	.word	0x08003211
 80031f0:	08003219 	.word	0x08003219
 80031f4:	08003221 	.word	0x08003221
 80031f8:	08003255 	.word	0x08003255
 80031fc:	08003227 	.word	0x08003227
 8003200:	08003255 	.word	0x08003255
 8003204:	08003255 	.word	0x08003255
 8003208:	08003255 	.word	0x08003255
 800320c:	0800322f 	.word	0x0800322f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003210:	f7ff fba2 	bl	8002958 <HAL_RCC_GetPCLK1Freq>
 8003214:	61b8      	str	r0, [r7, #24]
        break;
 8003216:	e022      	b.n	800325e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003218:	f7ff fbc0 	bl	800299c <HAL_RCC_GetPCLK2Freq>
 800321c:	61b8      	str	r0, [r7, #24]
        break;
 800321e:	e01e      	b.n	800325e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <UART_SetConfig+0x34c>)
 8003222:	61bb      	str	r3, [r7, #24]
        break;
 8003224:	e01b      	b.n	800325e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003226:	f7ff fb21 	bl	800286c <HAL_RCC_GetSysClockFreq>
 800322a:	61b8      	str	r0, [r7, #24]
        break;
 800322c:	e017      	b.n	800325e <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800322e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003232:	61bb      	str	r3, [r7, #24]
        break;
 8003234:	e013      	b.n	800325e <UART_SetConfig+0x35a>
 8003236:	bf00      	nop
 8003238:	40013800 	.word	0x40013800
 800323c:	40021000 	.word	0x40021000
 8003240:	40004400 	.word	0x40004400
 8003244:	40004800 	.word	0x40004800
 8003248:	40004c00 	.word	0x40004c00
 800324c:	40005000 	.word	0x40005000
 8003250:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	77bb      	strb	r3, [r7, #30]
        break;
 800325c:	bf00      	nop
    }

    if (pclk != 0U)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d018      	beq.n	8003296 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	085a      	lsrs	r2, r3, #1
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	441a      	add	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	fbb2 f3f3 	udiv	r3, r2, r3
 8003276:	b29b      	uxth	r3, r3
 8003278:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	2b0f      	cmp	r3, #15
 800327e:	d908      	bls.n	8003292 <UART_SetConfig+0x38e>
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003286:	d204      	bcs.n	8003292 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	60da      	str	r2, [r3, #12]
 8003290:	e001      	b.n	8003296 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80032a2:	7fbb      	ldrb	r3, [r7, #30]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3720      	adds	r7, #32
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	f003 0320 	and.w	r3, r3, #32
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003388:	2b00      	cmp	r3, #0
 800338a:	d01a      	beq.n	80033c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033aa:	d10a      	bne.n	80033c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	605a      	str	r2, [r3, #4]
  }
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003400:	f7fd fe12 	bl	8001028 <HAL_GetTick>
 8003404:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b08      	cmp	r3, #8
 8003412:	d10e      	bne.n	8003432 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003414:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f82d 	bl	8003482 <UART_WaitOnFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e023      	b.n	800347a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b04      	cmp	r3, #4
 800343e:	d10e      	bne.n	800345e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003440:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f817 	bl	8003482 <UART_WaitOnFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e00d      	b.n	800347a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2220      	movs	r2, #32
 8003462:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2220      	movs	r2, #32
 8003468:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b09c      	sub	sp, #112	; 0x70
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	603b      	str	r3, [r7, #0]
 800348e:	4613      	mov	r3, r2
 8003490:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003492:	e0a5      	b.n	80035e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003494:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349a:	f000 80a1 	beq.w	80035e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349e:	f7fd fdc3 	bl	8001028 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d302      	bcc.n	80034b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80034ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d13e      	bne.n	8003532 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034bc:	e853 3f00 	ldrex	r3, [r3]
 80034c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80034c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034c8:	667b      	str	r3, [r7, #100]	; 0x64
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80034d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80034da:	e841 2300 	strex	r3, r2, [r1]
 80034de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80034e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1e6      	bne.n	80034b4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	3308      	adds	r3, #8
 80034ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f0:	e853 3f00 	ldrex	r3, [r3]
 80034f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f8:	f023 0301 	bic.w	r3, r3, #1
 80034fc:	663b      	str	r3, [r7, #96]	; 0x60
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3308      	adds	r3, #8
 8003504:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003506:	64ba      	str	r2, [r7, #72]	; 0x48
 8003508:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800350c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800350e:	e841 2300 	strex	r3, r2, [r1]
 8003512:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1e5      	bne.n	80034e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2220      	movs	r2, #32
 800351e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e067      	b.n	8003602 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d04f      	beq.n	80035e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800354a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800354e:	d147      	bne.n	80035e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003558:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003562:	e853 3f00 	ldrex	r3, [r3]
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800356e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003578:	637b      	str	r3, [r7, #52]	; 0x34
 800357a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800357e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003580:	e841 2300 	strex	r3, r2, [r1]
 8003584:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1e6      	bne.n	800355a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3308      	adds	r3, #8
 8003592:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	e853 3f00 	ldrex	r3, [r3]
 800359a:	613b      	str	r3, [r7, #16]
   return(result);
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f023 0301 	bic.w	r3, r3, #1
 80035a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3308      	adds	r3, #8
 80035aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80035ac:	623a      	str	r2, [r7, #32]
 80035ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b0:	69f9      	ldr	r1, [r7, #28]
 80035b2:	6a3a      	ldr	r2, [r7, #32]
 80035b4:	e841 2300 	strex	r3, r2, [r1]
 80035b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1e5      	bne.n	800358c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2220      	movs	r2, #32
 80035c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e010      	b.n	8003602 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	69da      	ldr	r2, [r3, #28]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	4013      	ands	r3, r2
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	f43f af4a 	beq.w	8003494 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3770      	adds	r7, #112	; 0x70
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800360a:	b480      	push	{r7}
 800360c:	b085      	sub	sp, #20
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003612:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003616:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	b29b      	uxth	r3, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	b29b      	uxth	r3, r3
 8003628:	4013      	ands	r3, r2
 800362a:	b29a      	uxth	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003640:	b084      	sub	sp, #16
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	f107 0014 	add.w	r0, r7, #20
 800364e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	b004      	add	sp, #16
 8003680:	4770      	bx	lr
	...

08003684 <__errno>:
 8003684:	4b01      	ldr	r3, [pc, #4]	; (800368c <__errno+0x8>)
 8003686:	6818      	ldr	r0, [r3, #0]
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	2000000c 	.word	0x2000000c

08003690 <__libc_init_array>:
 8003690:	b570      	push	{r4, r5, r6, lr}
 8003692:	4d0d      	ldr	r5, [pc, #52]	; (80036c8 <__libc_init_array+0x38>)
 8003694:	4c0d      	ldr	r4, [pc, #52]	; (80036cc <__libc_init_array+0x3c>)
 8003696:	1b64      	subs	r4, r4, r5
 8003698:	10a4      	asrs	r4, r4, #2
 800369a:	2600      	movs	r6, #0
 800369c:	42a6      	cmp	r6, r4
 800369e:	d109      	bne.n	80036b4 <__libc_init_array+0x24>
 80036a0:	4d0b      	ldr	r5, [pc, #44]	; (80036d0 <__libc_init_array+0x40>)
 80036a2:	4c0c      	ldr	r4, [pc, #48]	; (80036d4 <__libc_init_array+0x44>)
 80036a4:	f000 fc4e 	bl	8003f44 <_init>
 80036a8:	1b64      	subs	r4, r4, r5
 80036aa:	10a4      	asrs	r4, r4, #2
 80036ac:	2600      	movs	r6, #0
 80036ae:	42a6      	cmp	r6, r4
 80036b0:	d105      	bne.n	80036be <__libc_init_array+0x2e>
 80036b2:	bd70      	pop	{r4, r5, r6, pc}
 80036b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036b8:	4798      	blx	r3
 80036ba:	3601      	adds	r6, #1
 80036bc:	e7ee      	b.n	800369c <__libc_init_array+0xc>
 80036be:	f855 3b04 	ldr.w	r3, [r5], #4
 80036c2:	4798      	blx	r3
 80036c4:	3601      	adds	r6, #1
 80036c6:	e7f2      	b.n	80036ae <__libc_init_array+0x1e>
 80036c8:	08003fd4 	.word	0x08003fd4
 80036cc:	08003fd4 	.word	0x08003fd4
 80036d0:	08003fd4 	.word	0x08003fd4
 80036d4:	08003fd8 	.word	0x08003fd8

080036d8 <memset>:
 80036d8:	4402      	add	r2, r0
 80036da:	4603      	mov	r3, r0
 80036dc:	4293      	cmp	r3, r2
 80036de:	d100      	bne.n	80036e2 <memset+0xa>
 80036e0:	4770      	bx	lr
 80036e2:	f803 1b01 	strb.w	r1, [r3], #1
 80036e6:	e7f9      	b.n	80036dc <memset+0x4>

080036e8 <siprintf>:
 80036e8:	b40e      	push	{r1, r2, r3}
 80036ea:	b500      	push	{lr}
 80036ec:	b09c      	sub	sp, #112	; 0x70
 80036ee:	ab1d      	add	r3, sp, #116	; 0x74
 80036f0:	9002      	str	r0, [sp, #8]
 80036f2:	9006      	str	r0, [sp, #24]
 80036f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036f8:	4809      	ldr	r0, [pc, #36]	; (8003720 <siprintf+0x38>)
 80036fa:	9107      	str	r1, [sp, #28]
 80036fc:	9104      	str	r1, [sp, #16]
 80036fe:	4909      	ldr	r1, [pc, #36]	; (8003724 <siprintf+0x3c>)
 8003700:	f853 2b04 	ldr.w	r2, [r3], #4
 8003704:	9105      	str	r1, [sp, #20]
 8003706:	6800      	ldr	r0, [r0, #0]
 8003708:	9301      	str	r3, [sp, #4]
 800370a:	a902      	add	r1, sp, #8
 800370c:	f000 f868 	bl	80037e0 <_svfiprintf_r>
 8003710:	9b02      	ldr	r3, [sp, #8]
 8003712:	2200      	movs	r2, #0
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	b01c      	add	sp, #112	; 0x70
 8003718:	f85d eb04 	ldr.w	lr, [sp], #4
 800371c:	b003      	add	sp, #12
 800371e:	4770      	bx	lr
 8003720:	2000000c 	.word	0x2000000c
 8003724:	ffff0208 	.word	0xffff0208

08003728 <__ssputs_r>:
 8003728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800372c:	688e      	ldr	r6, [r1, #8]
 800372e:	429e      	cmp	r6, r3
 8003730:	4682      	mov	sl, r0
 8003732:	460c      	mov	r4, r1
 8003734:	4690      	mov	r8, r2
 8003736:	461f      	mov	r7, r3
 8003738:	d838      	bhi.n	80037ac <__ssputs_r+0x84>
 800373a:	898a      	ldrh	r2, [r1, #12]
 800373c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003740:	d032      	beq.n	80037a8 <__ssputs_r+0x80>
 8003742:	6825      	ldr	r5, [r4, #0]
 8003744:	6909      	ldr	r1, [r1, #16]
 8003746:	eba5 0901 	sub.w	r9, r5, r1
 800374a:	6965      	ldr	r5, [r4, #20]
 800374c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003750:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003754:	3301      	adds	r3, #1
 8003756:	444b      	add	r3, r9
 8003758:	106d      	asrs	r5, r5, #1
 800375a:	429d      	cmp	r5, r3
 800375c:	bf38      	it	cc
 800375e:	461d      	movcc	r5, r3
 8003760:	0553      	lsls	r3, r2, #21
 8003762:	d531      	bpl.n	80037c8 <__ssputs_r+0xa0>
 8003764:	4629      	mov	r1, r5
 8003766:	f000 fb47 	bl	8003df8 <_malloc_r>
 800376a:	4606      	mov	r6, r0
 800376c:	b950      	cbnz	r0, 8003784 <__ssputs_r+0x5c>
 800376e:	230c      	movs	r3, #12
 8003770:	f8ca 3000 	str.w	r3, [sl]
 8003774:	89a3      	ldrh	r3, [r4, #12]
 8003776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800377a:	81a3      	strh	r3, [r4, #12]
 800377c:	f04f 30ff 	mov.w	r0, #4294967295
 8003780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003784:	6921      	ldr	r1, [r4, #16]
 8003786:	464a      	mov	r2, r9
 8003788:	f000 fabe 	bl	8003d08 <memcpy>
 800378c:	89a3      	ldrh	r3, [r4, #12]
 800378e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003796:	81a3      	strh	r3, [r4, #12]
 8003798:	6126      	str	r6, [r4, #16]
 800379a:	6165      	str	r5, [r4, #20]
 800379c:	444e      	add	r6, r9
 800379e:	eba5 0509 	sub.w	r5, r5, r9
 80037a2:	6026      	str	r6, [r4, #0]
 80037a4:	60a5      	str	r5, [r4, #8]
 80037a6:	463e      	mov	r6, r7
 80037a8:	42be      	cmp	r6, r7
 80037aa:	d900      	bls.n	80037ae <__ssputs_r+0x86>
 80037ac:	463e      	mov	r6, r7
 80037ae:	4632      	mov	r2, r6
 80037b0:	6820      	ldr	r0, [r4, #0]
 80037b2:	4641      	mov	r1, r8
 80037b4:	f000 fab6 	bl	8003d24 <memmove>
 80037b8:	68a3      	ldr	r3, [r4, #8]
 80037ba:	6822      	ldr	r2, [r4, #0]
 80037bc:	1b9b      	subs	r3, r3, r6
 80037be:	4432      	add	r2, r6
 80037c0:	60a3      	str	r3, [r4, #8]
 80037c2:	6022      	str	r2, [r4, #0]
 80037c4:	2000      	movs	r0, #0
 80037c6:	e7db      	b.n	8003780 <__ssputs_r+0x58>
 80037c8:	462a      	mov	r2, r5
 80037ca:	f000 fb6f 	bl	8003eac <_realloc_r>
 80037ce:	4606      	mov	r6, r0
 80037d0:	2800      	cmp	r0, #0
 80037d2:	d1e1      	bne.n	8003798 <__ssputs_r+0x70>
 80037d4:	6921      	ldr	r1, [r4, #16]
 80037d6:	4650      	mov	r0, sl
 80037d8:	f000 fabe 	bl	8003d58 <_free_r>
 80037dc:	e7c7      	b.n	800376e <__ssputs_r+0x46>
	...

080037e0 <_svfiprintf_r>:
 80037e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037e4:	4698      	mov	r8, r3
 80037e6:	898b      	ldrh	r3, [r1, #12]
 80037e8:	061b      	lsls	r3, r3, #24
 80037ea:	b09d      	sub	sp, #116	; 0x74
 80037ec:	4607      	mov	r7, r0
 80037ee:	460d      	mov	r5, r1
 80037f0:	4614      	mov	r4, r2
 80037f2:	d50e      	bpl.n	8003812 <_svfiprintf_r+0x32>
 80037f4:	690b      	ldr	r3, [r1, #16]
 80037f6:	b963      	cbnz	r3, 8003812 <_svfiprintf_r+0x32>
 80037f8:	2140      	movs	r1, #64	; 0x40
 80037fa:	f000 fafd 	bl	8003df8 <_malloc_r>
 80037fe:	6028      	str	r0, [r5, #0]
 8003800:	6128      	str	r0, [r5, #16]
 8003802:	b920      	cbnz	r0, 800380e <_svfiprintf_r+0x2e>
 8003804:	230c      	movs	r3, #12
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	f04f 30ff 	mov.w	r0, #4294967295
 800380c:	e0d1      	b.n	80039b2 <_svfiprintf_r+0x1d2>
 800380e:	2340      	movs	r3, #64	; 0x40
 8003810:	616b      	str	r3, [r5, #20]
 8003812:	2300      	movs	r3, #0
 8003814:	9309      	str	r3, [sp, #36]	; 0x24
 8003816:	2320      	movs	r3, #32
 8003818:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800381c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003820:	2330      	movs	r3, #48	; 0x30
 8003822:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80039cc <_svfiprintf_r+0x1ec>
 8003826:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800382a:	f04f 0901 	mov.w	r9, #1
 800382e:	4623      	mov	r3, r4
 8003830:	469a      	mov	sl, r3
 8003832:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003836:	b10a      	cbz	r2, 800383c <_svfiprintf_r+0x5c>
 8003838:	2a25      	cmp	r2, #37	; 0x25
 800383a:	d1f9      	bne.n	8003830 <_svfiprintf_r+0x50>
 800383c:	ebba 0b04 	subs.w	fp, sl, r4
 8003840:	d00b      	beq.n	800385a <_svfiprintf_r+0x7a>
 8003842:	465b      	mov	r3, fp
 8003844:	4622      	mov	r2, r4
 8003846:	4629      	mov	r1, r5
 8003848:	4638      	mov	r0, r7
 800384a:	f7ff ff6d 	bl	8003728 <__ssputs_r>
 800384e:	3001      	adds	r0, #1
 8003850:	f000 80aa 	beq.w	80039a8 <_svfiprintf_r+0x1c8>
 8003854:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003856:	445a      	add	r2, fp
 8003858:	9209      	str	r2, [sp, #36]	; 0x24
 800385a:	f89a 3000 	ldrb.w	r3, [sl]
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 80a2 	beq.w	80039a8 <_svfiprintf_r+0x1c8>
 8003864:	2300      	movs	r3, #0
 8003866:	f04f 32ff 	mov.w	r2, #4294967295
 800386a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800386e:	f10a 0a01 	add.w	sl, sl, #1
 8003872:	9304      	str	r3, [sp, #16]
 8003874:	9307      	str	r3, [sp, #28]
 8003876:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800387a:	931a      	str	r3, [sp, #104]	; 0x68
 800387c:	4654      	mov	r4, sl
 800387e:	2205      	movs	r2, #5
 8003880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003884:	4851      	ldr	r0, [pc, #324]	; (80039cc <_svfiprintf_r+0x1ec>)
 8003886:	f7fc fca3 	bl	80001d0 <memchr>
 800388a:	9a04      	ldr	r2, [sp, #16]
 800388c:	b9d8      	cbnz	r0, 80038c6 <_svfiprintf_r+0xe6>
 800388e:	06d0      	lsls	r0, r2, #27
 8003890:	bf44      	itt	mi
 8003892:	2320      	movmi	r3, #32
 8003894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003898:	0711      	lsls	r1, r2, #28
 800389a:	bf44      	itt	mi
 800389c:	232b      	movmi	r3, #43	; 0x2b
 800389e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038a2:	f89a 3000 	ldrb.w	r3, [sl]
 80038a6:	2b2a      	cmp	r3, #42	; 0x2a
 80038a8:	d015      	beq.n	80038d6 <_svfiprintf_r+0xf6>
 80038aa:	9a07      	ldr	r2, [sp, #28]
 80038ac:	4654      	mov	r4, sl
 80038ae:	2000      	movs	r0, #0
 80038b0:	f04f 0c0a 	mov.w	ip, #10
 80038b4:	4621      	mov	r1, r4
 80038b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038ba:	3b30      	subs	r3, #48	; 0x30
 80038bc:	2b09      	cmp	r3, #9
 80038be:	d94e      	bls.n	800395e <_svfiprintf_r+0x17e>
 80038c0:	b1b0      	cbz	r0, 80038f0 <_svfiprintf_r+0x110>
 80038c2:	9207      	str	r2, [sp, #28]
 80038c4:	e014      	b.n	80038f0 <_svfiprintf_r+0x110>
 80038c6:	eba0 0308 	sub.w	r3, r0, r8
 80038ca:	fa09 f303 	lsl.w	r3, r9, r3
 80038ce:	4313      	orrs	r3, r2
 80038d0:	9304      	str	r3, [sp, #16]
 80038d2:	46a2      	mov	sl, r4
 80038d4:	e7d2      	b.n	800387c <_svfiprintf_r+0x9c>
 80038d6:	9b03      	ldr	r3, [sp, #12]
 80038d8:	1d19      	adds	r1, r3, #4
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	9103      	str	r1, [sp, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	bfbb      	ittet	lt
 80038e2:	425b      	neglt	r3, r3
 80038e4:	f042 0202 	orrlt.w	r2, r2, #2
 80038e8:	9307      	strge	r3, [sp, #28]
 80038ea:	9307      	strlt	r3, [sp, #28]
 80038ec:	bfb8      	it	lt
 80038ee:	9204      	strlt	r2, [sp, #16]
 80038f0:	7823      	ldrb	r3, [r4, #0]
 80038f2:	2b2e      	cmp	r3, #46	; 0x2e
 80038f4:	d10c      	bne.n	8003910 <_svfiprintf_r+0x130>
 80038f6:	7863      	ldrb	r3, [r4, #1]
 80038f8:	2b2a      	cmp	r3, #42	; 0x2a
 80038fa:	d135      	bne.n	8003968 <_svfiprintf_r+0x188>
 80038fc:	9b03      	ldr	r3, [sp, #12]
 80038fe:	1d1a      	adds	r2, r3, #4
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	9203      	str	r2, [sp, #12]
 8003904:	2b00      	cmp	r3, #0
 8003906:	bfb8      	it	lt
 8003908:	f04f 33ff 	movlt.w	r3, #4294967295
 800390c:	3402      	adds	r4, #2
 800390e:	9305      	str	r3, [sp, #20]
 8003910:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80039dc <_svfiprintf_r+0x1fc>
 8003914:	7821      	ldrb	r1, [r4, #0]
 8003916:	2203      	movs	r2, #3
 8003918:	4650      	mov	r0, sl
 800391a:	f7fc fc59 	bl	80001d0 <memchr>
 800391e:	b140      	cbz	r0, 8003932 <_svfiprintf_r+0x152>
 8003920:	2340      	movs	r3, #64	; 0x40
 8003922:	eba0 000a 	sub.w	r0, r0, sl
 8003926:	fa03 f000 	lsl.w	r0, r3, r0
 800392a:	9b04      	ldr	r3, [sp, #16]
 800392c:	4303      	orrs	r3, r0
 800392e:	3401      	adds	r4, #1
 8003930:	9304      	str	r3, [sp, #16]
 8003932:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003936:	4826      	ldr	r0, [pc, #152]	; (80039d0 <_svfiprintf_r+0x1f0>)
 8003938:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800393c:	2206      	movs	r2, #6
 800393e:	f7fc fc47 	bl	80001d0 <memchr>
 8003942:	2800      	cmp	r0, #0
 8003944:	d038      	beq.n	80039b8 <_svfiprintf_r+0x1d8>
 8003946:	4b23      	ldr	r3, [pc, #140]	; (80039d4 <_svfiprintf_r+0x1f4>)
 8003948:	bb1b      	cbnz	r3, 8003992 <_svfiprintf_r+0x1b2>
 800394a:	9b03      	ldr	r3, [sp, #12]
 800394c:	3307      	adds	r3, #7
 800394e:	f023 0307 	bic.w	r3, r3, #7
 8003952:	3308      	adds	r3, #8
 8003954:	9303      	str	r3, [sp, #12]
 8003956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003958:	4433      	add	r3, r6
 800395a:	9309      	str	r3, [sp, #36]	; 0x24
 800395c:	e767      	b.n	800382e <_svfiprintf_r+0x4e>
 800395e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003962:	460c      	mov	r4, r1
 8003964:	2001      	movs	r0, #1
 8003966:	e7a5      	b.n	80038b4 <_svfiprintf_r+0xd4>
 8003968:	2300      	movs	r3, #0
 800396a:	3401      	adds	r4, #1
 800396c:	9305      	str	r3, [sp, #20]
 800396e:	4619      	mov	r1, r3
 8003970:	f04f 0c0a 	mov.w	ip, #10
 8003974:	4620      	mov	r0, r4
 8003976:	f810 2b01 	ldrb.w	r2, [r0], #1
 800397a:	3a30      	subs	r2, #48	; 0x30
 800397c:	2a09      	cmp	r2, #9
 800397e:	d903      	bls.n	8003988 <_svfiprintf_r+0x1a8>
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0c5      	beq.n	8003910 <_svfiprintf_r+0x130>
 8003984:	9105      	str	r1, [sp, #20]
 8003986:	e7c3      	b.n	8003910 <_svfiprintf_r+0x130>
 8003988:	fb0c 2101 	mla	r1, ip, r1, r2
 800398c:	4604      	mov	r4, r0
 800398e:	2301      	movs	r3, #1
 8003990:	e7f0      	b.n	8003974 <_svfiprintf_r+0x194>
 8003992:	ab03      	add	r3, sp, #12
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	462a      	mov	r2, r5
 8003998:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <_svfiprintf_r+0x1f8>)
 800399a:	a904      	add	r1, sp, #16
 800399c:	4638      	mov	r0, r7
 800399e:	f3af 8000 	nop.w
 80039a2:	1c42      	adds	r2, r0, #1
 80039a4:	4606      	mov	r6, r0
 80039a6:	d1d6      	bne.n	8003956 <_svfiprintf_r+0x176>
 80039a8:	89ab      	ldrh	r3, [r5, #12]
 80039aa:	065b      	lsls	r3, r3, #25
 80039ac:	f53f af2c 	bmi.w	8003808 <_svfiprintf_r+0x28>
 80039b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039b2:	b01d      	add	sp, #116	; 0x74
 80039b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039b8:	ab03      	add	r3, sp, #12
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	462a      	mov	r2, r5
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <_svfiprintf_r+0x1f8>)
 80039c0:	a904      	add	r1, sp, #16
 80039c2:	4638      	mov	r0, r7
 80039c4:	f000 f87a 	bl	8003abc <_printf_i>
 80039c8:	e7eb      	b.n	80039a2 <_svfiprintf_r+0x1c2>
 80039ca:	bf00      	nop
 80039cc:	08003fa0 	.word	0x08003fa0
 80039d0:	08003faa 	.word	0x08003faa
 80039d4:	00000000 	.word	0x00000000
 80039d8:	08003729 	.word	0x08003729
 80039dc:	08003fa6 	.word	0x08003fa6

080039e0 <_printf_common>:
 80039e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039e4:	4616      	mov	r6, r2
 80039e6:	4699      	mov	r9, r3
 80039e8:	688a      	ldr	r2, [r1, #8]
 80039ea:	690b      	ldr	r3, [r1, #16]
 80039ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039f0:	4293      	cmp	r3, r2
 80039f2:	bfb8      	it	lt
 80039f4:	4613      	movlt	r3, r2
 80039f6:	6033      	str	r3, [r6, #0]
 80039f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039fc:	4607      	mov	r7, r0
 80039fe:	460c      	mov	r4, r1
 8003a00:	b10a      	cbz	r2, 8003a06 <_printf_common+0x26>
 8003a02:	3301      	adds	r3, #1
 8003a04:	6033      	str	r3, [r6, #0]
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	0699      	lsls	r1, r3, #26
 8003a0a:	bf42      	ittt	mi
 8003a0c:	6833      	ldrmi	r3, [r6, #0]
 8003a0e:	3302      	addmi	r3, #2
 8003a10:	6033      	strmi	r3, [r6, #0]
 8003a12:	6825      	ldr	r5, [r4, #0]
 8003a14:	f015 0506 	ands.w	r5, r5, #6
 8003a18:	d106      	bne.n	8003a28 <_printf_common+0x48>
 8003a1a:	f104 0a19 	add.w	sl, r4, #25
 8003a1e:	68e3      	ldr	r3, [r4, #12]
 8003a20:	6832      	ldr	r2, [r6, #0]
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	42ab      	cmp	r3, r5
 8003a26:	dc26      	bgt.n	8003a76 <_printf_common+0x96>
 8003a28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a2c:	1e13      	subs	r3, r2, #0
 8003a2e:	6822      	ldr	r2, [r4, #0]
 8003a30:	bf18      	it	ne
 8003a32:	2301      	movne	r3, #1
 8003a34:	0692      	lsls	r2, r2, #26
 8003a36:	d42b      	bmi.n	8003a90 <_printf_common+0xb0>
 8003a38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a3c:	4649      	mov	r1, r9
 8003a3e:	4638      	mov	r0, r7
 8003a40:	47c0      	blx	r8
 8003a42:	3001      	adds	r0, #1
 8003a44:	d01e      	beq.n	8003a84 <_printf_common+0xa4>
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	68e5      	ldr	r5, [r4, #12]
 8003a4a:	6832      	ldr	r2, [r6, #0]
 8003a4c:	f003 0306 	and.w	r3, r3, #6
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	bf08      	it	eq
 8003a54:	1aad      	subeq	r5, r5, r2
 8003a56:	68a3      	ldr	r3, [r4, #8]
 8003a58:	6922      	ldr	r2, [r4, #16]
 8003a5a:	bf0c      	ite	eq
 8003a5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a60:	2500      	movne	r5, #0
 8003a62:	4293      	cmp	r3, r2
 8003a64:	bfc4      	itt	gt
 8003a66:	1a9b      	subgt	r3, r3, r2
 8003a68:	18ed      	addgt	r5, r5, r3
 8003a6a:	2600      	movs	r6, #0
 8003a6c:	341a      	adds	r4, #26
 8003a6e:	42b5      	cmp	r5, r6
 8003a70:	d11a      	bne.n	8003aa8 <_printf_common+0xc8>
 8003a72:	2000      	movs	r0, #0
 8003a74:	e008      	b.n	8003a88 <_printf_common+0xa8>
 8003a76:	2301      	movs	r3, #1
 8003a78:	4652      	mov	r2, sl
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	4638      	mov	r0, r7
 8003a7e:	47c0      	blx	r8
 8003a80:	3001      	adds	r0, #1
 8003a82:	d103      	bne.n	8003a8c <_printf_common+0xac>
 8003a84:	f04f 30ff 	mov.w	r0, #4294967295
 8003a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a8c:	3501      	adds	r5, #1
 8003a8e:	e7c6      	b.n	8003a1e <_printf_common+0x3e>
 8003a90:	18e1      	adds	r1, r4, r3
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	2030      	movs	r0, #48	; 0x30
 8003a96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a9a:	4422      	add	r2, r4
 8003a9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003aa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003aa4:	3302      	adds	r3, #2
 8003aa6:	e7c7      	b.n	8003a38 <_printf_common+0x58>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	4622      	mov	r2, r4
 8003aac:	4649      	mov	r1, r9
 8003aae:	4638      	mov	r0, r7
 8003ab0:	47c0      	blx	r8
 8003ab2:	3001      	adds	r0, #1
 8003ab4:	d0e6      	beq.n	8003a84 <_printf_common+0xa4>
 8003ab6:	3601      	adds	r6, #1
 8003ab8:	e7d9      	b.n	8003a6e <_printf_common+0x8e>
	...

08003abc <_printf_i>:
 8003abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ac0:	460c      	mov	r4, r1
 8003ac2:	4691      	mov	r9, r2
 8003ac4:	7e27      	ldrb	r7, [r4, #24]
 8003ac6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003ac8:	2f78      	cmp	r7, #120	; 0x78
 8003aca:	4680      	mov	r8, r0
 8003acc:	469a      	mov	sl, r3
 8003ace:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ad2:	d807      	bhi.n	8003ae4 <_printf_i+0x28>
 8003ad4:	2f62      	cmp	r7, #98	; 0x62
 8003ad6:	d80a      	bhi.n	8003aee <_printf_i+0x32>
 8003ad8:	2f00      	cmp	r7, #0
 8003ada:	f000 80d8 	beq.w	8003c8e <_printf_i+0x1d2>
 8003ade:	2f58      	cmp	r7, #88	; 0x58
 8003ae0:	f000 80a3 	beq.w	8003c2a <_printf_i+0x16e>
 8003ae4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ae8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003aec:	e03a      	b.n	8003b64 <_printf_i+0xa8>
 8003aee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003af2:	2b15      	cmp	r3, #21
 8003af4:	d8f6      	bhi.n	8003ae4 <_printf_i+0x28>
 8003af6:	a001      	add	r0, pc, #4	; (adr r0, 8003afc <_printf_i+0x40>)
 8003af8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003afc:	08003b55 	.word	0x08003b55
 8003b00:	08003b69 	.word	0x08003b69
 8003b04:	08003ae5 	.word	0x08003ae5
 8003b08:	08003ae5 	.word	0x08003ae5
 8003b0c:	08003ae5 	.word	0x08003ae5
 8003b10:	08003ae5 	.word	0x08003ae5
 8003b14:	08003b69 	.word	0x08003b69
 8003b18:	08003ae5 	.word	0x08003ae5
 8003b1c:	08003ae5 	.word	0x08003ae5
 8003b20:	08003ae5 	.word	0x08003ae5
 8003b24:	08003ae5 	.word	0x08003ae5
 8003b28:	08003c75 	.word	0x08003c75
 8003b2c:	08003b99 	.word	0x08003b99
 8003b30:	08003c57 	.word	0x08003c57
 8003b34:	08003ae5 	.word	0x08003ae5
 8003b38:	08003ae5 	.word	0x08003ae5
 8003b3c:	08003c97 	.word	0x08003c97
 8003b40:	08003ae5 	.word	0x08003ae5
 8003b44:	08003b99 	.word	0x08003b99
 8003b48:	08003ae5 	.word	0x08003ae5
 8003b4c:	08003ae5 	.word	0x08003ae5
 8003b50:	08003c5f 	.word	0x08003c5f
 8003b54:	680b      	ldr	r3, [r1, #0]
 8003b56:	1d1a      	adds	r2, r3, #4
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	600a      	str	r2, [r1, #0]
 8003b5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0a3      	b.n	8003cb0 <_printf_i+0x1f4>
 8003b68:	6825      	ldr	r5, [r4, #0]
 8003b6a:	6808      	ldr	r0, [r1, #0]
 8003b6c:	062e      	lsls	r6, r5, #24
 8003b6e:	f100 0304 	add.w	r3, r0, #4
 8003b72:	d50a      	bpl.n	8003b8a <_printf_i+0xce>
 8003b74:	6805      	ldr	r5, [r0, #0]
 8003b76:	600b      	str	r3, [r1, #0]
 8003b78:	2d00      	cmp	r5, #0
 8003b7a:	da03      	bge.n	8003b84 <_printf_i+0xc8>
 8003b7c:	232d      	movs	r3, #45	; 0x2d
 8003b7e:	426d      	negs	r5, r5
 8003b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b84:	485e      	ldr	r0, [pc, #376]	; (8003d00 <_printf_i+0x244>)
 8003b86:	230a      	movs	r3, #10
 8003b88:	e019      	b.n	8003bbe <_printf_i+0x102>
 8003b8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003b8e:	6805      	ldr	r5, [r0, #0]
 8003b90:	600b      	str	r3, [r1, #0]
 8003b92:	bf18      	it	ne
 8003b94:	b22d      	sxthne	r5, r5
 8003b96:	e7ef      	b.n	8003b78 <_printf_i+0xbc>
 8003b98:	680b      	ldr	r3, [r1, #0]
 8003b9a:	6825      	ldr	r5, [r4, #0]
 8003b9c:	1d18      	adds	r0, r3, #4
 8003b9e:	6008      	str	r0, [r1, #0]
 8003ba0:	0628      	lsls	r0, r5, #24
 8003ba2:	d501      	bpl.n	8003ba8 <_printf_i+0xec>
 8003ba4:	681d      	ldr	r5, [r3, #0]
 8003ba6:	e002      	b.n	8003bae <_printf_i+0xf2>
 8003ba8:	0669      	lsls	r1, r5, #25
 8003baa:	d5fb      	bpl.n	8003ba4 <_printf_i+0xe8>
 8003bac:	881d      	ldrh	r5, [r3, #0]
 8003bae:	4854      	ldr	r0, [pc, #336]	; (8003d00 <_printf_i+0x244>)
 8003bb0:	2f6f      	cmp	r7, #111	; 0x6f
 8003bb2:	bf0c      	ite	eq
 8003bb4:	2308      	moveq	r3, #8
 8003bb6:	230a      	movne	r3, #10
 8003bb8:	2100      	movs	r1, #0
 8003bba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003bbe:	6866      	ldr	r6, [r4, #4]
 8003bc0:	60a6      	str	r6, [r4, #8]
 8003bc2:	2e00      	cmp	r6, #0
 8003bc4:	bfa2      	ittt	ge
 8003bc6:	6821      	ldrge	r1, [r4, #0]
 8003bc8:	f021 0104 	bicge.w	r1, r1, #4
 8003bcc:	6021      	strge	r1, [r4, #0]
 8003bce:	b90d      	cbnz	r5, 8003bd4 <_printf_i+0x118>
 8003bd0:	2e00      	cmp	r6, #0
 8003bd2:	d04d      	beq.n	8003c70 <_printf_i+0x1b4>
 8003bd4:	4616      	mov	r6, r2
 8003bd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8003bda:	fb03 5711 	mls	r7, r3, r1, r5
 8003bde:	5dc7      	ldrb	r7, [r0, r7]
 8003be0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003be4:	462f      	mov	r7, r5
 8003be6:	42bb      	cmp	r3, r7
 8003be8:	460d      	mov	r5, r1
 8003bea:	d9f4      	bls.n	8003bd6 <_printf_i+0x11a>
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d10b      	bne.n	8003c08 <_printf_i+0x14c>
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	07df      	lsls	r7, r3, #31
 8003bf4:	d508      	bpl.n	8003c08 <_printf_i+0x14c>
 8003bf6:	6923      	ldr	r3, [r4, #16]
 8003bf8:	6861      	ldr	r1, [r4, #4]
 8003bfa:	4299      	cmp	r1, r3
 8003bfc:	bfde      	ittt	le
 8003bfe:	2330      	movle	r3, #48	; 0x30
 8003c00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c08:	1b92      	subs	r2, r2, r6
 8003c0a:	6122      	str	r2, [r4, #16]
 8003c0c:	f8cd a000 	str.w	sl, [sp]
 8003c10:	464b      	mov	r3, r9
 8003c12:	aa03      	add	r2, sp, #12
 8003c14:	4621      	mov	r1, r4
 8003c16:	4640      	mov	r0, r8
 8003c18:	f7ff fee2 	bl	80039e0 <_printf_common>
 8003c1c:	3001      	adds	r0, #1
 8003c1e:	d14c      	bne.n	8003cba <_printf_i+0x1fe>
 8003c20:	f04f 30ff 	mov.w	r0, #4294967295
 8003c24:	b004      	add	sp, #16
 8003c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c2a:	4835      	ldr	r0, [pc, #212]	; (8003d00 <_printf_i+0x244>)
 8003c2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c30:	6823      	ldr	r3, [r4, #0]
 8003c32:	680e      	ldr	r6, [r1, #0]
 8003c34:	061f      	lsls	r7, r3, #24
 8003c36:	f856 5b04 	ldr.w	r5, [r6], #4
 8003c3a:	600e      	str	r6, [r1, #0]
 8003c3c:	d514      	bpl.n	8003c68 <_printf_i+0x1ac>
 8003c3e:	07d9      	lsls	r1, r3, #31
 8003c40:	bf44      	itt	mi
 8003c42:	f043 0320 	orrmi.w	r3, r3, #32
 8003c46:	6023      	strmi	r3, [r4, #0]
 8003c48:	b91d      	cbnz	r5, 8003c52 <_printf_i+0x196>
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	f023 0320 	bic.w	r3, r3, #32
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	2310      	movs	r3, #16
 8003c54:	e7b0      	b.n	8003bb8 <_printf_i+0xfc>
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	f043 0320 	orr.w	r3, r3, #32
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	2378      	movs	r3, #120	; 0x78
 8003c60:	4828      	ldr	r0, [pc, #160]	; (8003d04 <_printf_i+0x248>)
 8003c62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c66:	e7e3      	b.n	8003c30 <_printf_i+0x174>
 8003c68:	065e      	lsls	r6, r3, #25
 8003c6a:	bf48      	it	mi
 8003c6c:	b2ad      	uxthmi	r5, r5
 8003c6e:	e7e6      	b.n	8003c3e <_printf_i+0x182>
 8003c70:	4616      	mov	r6, r2
 8003c72:	e7bb      	b.n	8003bec <_printf_i+0x130>
 8003c74:	680b      	ldr	r3, [r1, #0]
 8003c76:	6826      	ldr	r6, [r4, #0]
 8003c78:	6960      	ldr	r0, [r4, #20]
 8003c7a:	1d1d      	adds	r5, r3, #4
 8003c7c:	600d      	str	r5, [r1, #0]
 8003c7e:	0635      	lsls	r5, r6, #24
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	d501      	bpl.n	8003c88 <_printf_i+0x1cc>
 8003c84:	6018      	str	r0, [r3, #0]
 8003c86:	e002      	b.n	8003c8e <_printf_i+0x1d2>
 8003c88:	0671      	lsls	r1, r6, #25
 8003c8a:	d5fb      	bpl.n	8003c84 <_printf_i+0x1c8>
 8003c8c:	8018      	strh	r0, [r3, #0]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	6123      	str	r3, [r4, #16]
 8003c92:	4616      	mov	r6, r2
 8003c94:	e7ba      	b.n	8003c0c <_printf_i+0x150>
 8003c96:	680b      	ldr	r3, [r1, #0]
 8003c98:	1d1a      	adds	r2, r3, #4
 8003c9a:	600a      	str	r2, [r1, #0]
 8003c9c:	681e      	ldr	r6, [r3, #0]
 8003c9e:	6862      	ldr	r2, [r4, #4]
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	4630      	mov	r0, r6
 8003ca4:	f7fc fa94 	bl	80001d0 <memchr>
 8003ca8:	b108      	cbz	r0, 8003cae <_printf_i+0x1f2>
 8003caa:	1b80      	subs	r0, r0, r6
 8003cac:	6060      	str	r0, [r4, #4]
 8003cae:	6863      	ldr	r3, [r4, #4]
 8003cb0:	6123      	str	r3, [r4, #16]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cb8:	e7a8      	b.n	8003c0c <_printf_i+0x150>
 8003cba:	6923      	ldr	r3, [r4, #16]
 8003cbc:	4632      	mov	r2, r6
 8003cbe:	4649      	mov	r1, r9
 8003cc0:	4640      	mov	r0, r8
 8003cc2:	47d0      	blx	sl
 8003cc4:	3001      	adds	r0, #1
 8003cc6:	d0ab      	beq.n	8003c20 <_printf_i+0x164>
 8003cc8:	6823      	ldr	r3, [r4, #0]
 8003cca:	079b      	lsls	r3, r3, #30
 8003ccc:	d413      	bmi.n	8003cf6 <_printf_i+0x23a>
 8003cce:	68e0      	ldr	r0, [r4, #12]
 8003cd0:	9b03      	ldr	r3, [sp, #12]
 8003cd2:	4298      	cmp	r0, r3
 8003cd4:	bfb8      	it	lt
 8003cd6:	4618      	movlt	r0, r3
 8003cd8:	e7a4      	b.n	8003c24 <_printf_i+0x168>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	4632      	mov	r2, r6
 8003cde:	4649      	mov	r1, r9
 8003ce0:	4640      	mov	r0, r8
 8003ce2:	47d0      	blx	sl
 8003ce4:	3001      	adds	r0, #1
 8003ce6:	d09b      	beq.n	8003c20 <_printf_i+0x164>
 8003ce8:	3501      	adds	r5, #1
 8003cea:	68e3      	ldr	r3, [r4, #12]
 8003cec:	9903      	ldr	r1, [sp, #12]
 8003cee:	1a5b      	subs	r3, r3, r1
 8003cf0:	42ab      	cmp	r3, r5
 8003cf2:	dcf2      	bgt.n	8003cda <_printf_i+0x21e>
 8003cf4:	e7eb      	b.n	8003cce <_printf_i+0x212>
 8003cf6:	2500      	movs	r5, #0
 8003cf8:	f104 0619 	add.w	r6, r4, #25
 8003cfc:	e7f5      	b.n	8003cea <_printf_i+0x22e>
 8003cfe:	bf00      	nop
 8003d00:	08003fb1 	.word	0x08003fb1
 8003d04:	08003fc2 	.word	0x08003fc2

08003d08 <memcpy>:
 8003d08:	440a      	add	r2, r1
 8003d0a:	4291      	cmp	r1, r2
 8003d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d10:	d100      	bne.n	8003d14 <memcpy+0xc>
 8003d12:	4770      	bx	lr
 8003d14:	b510      	push	{r4, lr}
 8003d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d1e:	4291      	cmp	r1, r2
 8003d20:	d1f9      	bne.n	8003d16 <memcpy+0xe>
 8003d22:	bd10      	pop	{r4, pc}

08003d24 <memmove>:
 8003d24:	4288      	cmp	r0, r1
 8003d26:	b510      	push	{r4, lr}
 8003d28:	eb01 0402 	add.w	r4, r1, r2
 8003d2c:	d902      	bls.n	8003d34 <memmove+0x10>
 8003d2e:	4284      	cmp	r4, r0
 8003d30:	4623      	mov	r3, r4
 8003d32:	d807      	bhi.n	8003d44 <memmove+0x20>
 8003d34:	1e43      	subs	r3, r0, #1
 8003d36:	42a1      	cmp	r1, r4
 8003d38:	d008      	beq.n	8003d4c <memmove+0x28>
 8003d3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d42:	e7f8      	b.n	8003d36 <memmove+0x12>
 8003d44:	4402      	add	r2, r0
 8003d46:	4601      	mov	r1, r0
 8003d48:	428a      	cmp	r2, r1
 8003d4a:	d100      	bne.n	8003d4e <memmove+0x2a>
 8003d4c:	bd10      	pop	{r4, pc}
 8003d4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d56:	e7f7      	b.n	8003d48 <memmove+0x24>

08003d58 <_free_r>:
 8003d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d5a:	2900      	cmp	r1, #0
 8003d5c:	d048      	beq.n	8003df0 <_free_r+0x98>
 8003d5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d62:	9001      	str	r0, [sp, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f1a1 0404 	sub.w	r4, r1, #4
 8003d6a:	bfb8      	it	lt
 8003d6c:	18e4      	addlt	r4, r4, r3
 8003d6e:	f000 f8d3 	bl	8003f18 <__malloc_lock>
 8003d72:	4a20      	ldr	r2, [pc, #128]	; (8003df4 <_free_r+0x9c>)
 8003d74:	9801      	ldr	r0, [sp, #4]
 8003d76:	6813      	ldr	r3, [r2, #0]
 8003d78:	4615      	mov	r5, r2
 8003d7a:	b933      	cbnz	r3, 8003d8a <_free_r+0x32>
 8003d7c:	6063      	str	r3, [r4, #4]
 8003d7e:	6014      	str	r4, [r2, #0]
 8003d80:	b003      	add	sp, #12
 8003d82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d86:	f000 b8cd 	b.w	8003f24 <__malloc_unlock>
 8003d8a:	42a3      	cmp	r3, r4
 8003d8c:	d90b      	bls.n	8003da6 <_free_r+0x4e>
 8003d8e:	6821      	ldr	r1, [r4, #0]
 8003d90:	1862      	adds	r2, r4, r1
 8003d92:	4293      	cmp	r3, r2
 8003d94:	bf04      	itt	eq
 8003d96:	681a      	ldreq	r2, [r3, #0]
 8003d98:	685b      	ldreq	r3, [r3, #4]
 8003d9a:	6063      	str	r3, [r4, #4]
 8003d9c:	bf04      	itt	eq
 8003d9e:	1852      	addeq	r2, r2, r1
 8003da0:	6022      	streq	r2, [r4, #0]
 8003da2:	602c      	str	r4, [r5, #0]
 8003da4:	e7ec      	b.n	8003d80 <_free_r+0x28>
 8003da6:	461a      	mov	r2, r3
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	b10b      	cbz	r3, 8003db0 <_free_r+0x58>
 8003dac:	42a3      	cmp	r3, r4
 8003dae:	d9fa      	bls.n	8003da6 <_free_r+0x4e>
 8003db0:	6811      	ldr	r1, [r2, #0]
 8003db2:	1855      	adds	r5, r2, r1
 8003db4:	42a5      	cmp	r5, r4
 8003db6:	d10b      	bne.n	8003dd0 <_free_r+0x78>
 8003db8:	6824      	ldr	r4, [r4, #0]
 8003dba:	4421      	add	r1, r4
 8003dbc:	1854      	adds	r4, r2, r1
 8003dbe:	42a3      	cmp	r3, r4
 8003dc0:	6011      	str	r1, [r2, #0]
 8003dc2:	d1dd      	bne.n	8003d80 <_free_r+0x28>
 8003dc4:	681c      	ldr	r4, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	6053      	str	r3, [r2, #4]
 8003dca:	4421      	add	r1, r4
 8003dcc:	6011      	str	r1, [r2, #0]
 8003dce:	e7d7      	b.n	8003d80 <_free_r+0x28>
 8003dd0:	d902      	bls.n	8003dd8 <_free_r+0x80>
 8003dd2:	230c      	movs	r3, #12
 8003dd4:	6003      	str	r3, [r0, #0]
 8003dd6:	e7d3      	b.n	8003d80 <_free_r+0x28>
 8003dd8:	6825      	ldr	r5, [r4, #0]
 8003dda:	1961      	adds	r1, r4, r5
 8003ddc:	428b      	cmp	r3, r1
 8003dde:	bf04      	itt	eq
 8003de0:	6819      	ldreq	r1, [r3, #0]
 8003de2:	685b      	ldreq	r3, [r3, #4]
 8003de4:	6063      	str	r3, [r4, #4]
 8003de6:	bf04      	itt	eq
 8003de8:	1949      	addeq	r1, r1, r5
 8003dea:	6021      	streq	r1, [r4, #0]
 8003dec:	6054      	str	r4, [r2, #4]
 8003dee:	e7c7      	b.n	8003d80 <_free_r+0x28>
 8003df0:	b003      	add	sp, #12
 8003df2:	bd30      	pop	{r4, r5, pc}
 8003df4:	20000090 	.word	0x20000090

08003df8 <_malloc_r>:
 8003df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfa:	1ccd      	adds	r5, r1, #3
 8003dfc:	f025 0503 	bic.w	r5, r5, #3
 8003e00:	3508      	adds	r5, #8
 8003e02:	2d0c      	cmp	r5, #12
 8003e04:	bf38      	it	cc
 8003e06:	250c      	movcc	r5, #12
 8003e08:	2d00      	cmp	r5, #0
 8003e0a:	4606      	mov	r6, r0
 8003e0c:	db01      	blt.n	8003e12 <_malloc_r+0x1a>
 8003e0e:	42a9      	cmp	r1, r5
 8003e10:	d903      	bls.n	8003e1a <_malloc_r+0x22>
 8003e12:	230c      	movs	r3, #12
 8003e14:	6033      	str	r3, [r6, #0]
 8003e16:	2000      	movs	r0, #0
 8003e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e1a:	f000 f87d 	bl	8003f18 <__malloc_lock>
 8003e1e:	4921      	ldr	r1, [pc, #132]	; (8003ea4 <_malloc_r+0xac>)
 8003e20:	680a      	ldr	r2, [r1, #0]
 8003e22:	4614      	mov	r4, r2
 8003e24:	b99c      	cbnz	r4, 8003e4e <_malloc_r+0x56>
 8003e26:	4f20      	ldr	r7, [pc, #128]	; (8003ea8 <_malloc_r+0xb0>)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	b923      	cbnz	r3, 8003e36 <_malloc_r+0x3e>
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	4630      	mov	r0, r6
 8003e30:	f000 f862 	bl	8003ef8 <_sbrk_r>
 8003e34:	6038      	str	r0, [r7, #0]
 8003e36:	4629      	mov	r1, r5
 8003e38:	4630      	mov	r0, r6
 8003e3a:	f000 f85d 	bl	8003ef8 <_sbrk_r>
 8003e3e:	1c43      	adds	r3, r0, #1
 8003e40:	d123      	bne.n	8003e8a <_malloc_r+0x92>
 8003e42:	230c      	movs	r3, #12
 8003e44:	6033      	str	r3, [r6, #0]
 8003e46:	4630      	mov	r0, r6
 8003e48:	f000 f86c 	bl	8003f24 <__malloc_unlock>
 8003e4c:	e7e3      	b.n	8003e16 <_malloc_r+0x1e>
 8003e4e:	6823      	ldr	r3, [r4, #0]
 8003e50:	1b5b      	subs	r3, r3, r5
 8003e52:	d417      	bmi.n	8003e84 <_malloc_r+0x8c>
 8003e54:	2b0b      	cmp	r3, #11
 8003e56:	d903      	bls.n	8003e60 <_malloc_r+0x68>
 8003e58:	6023      	str	r3, [r4, #0]
 8003e5a:	441c      	add	r4, r3
 8003e5c:	6025      	str	r5, [r4, #0]
 8003e5e:	e004      	b.n	8003e6a <_malloc_r+0x72>
 8003e60:	6863      	ldr	r3, [r4, #4]
 8003e62:	42a2      	cmp	r2, r4
 8003e64:	bf0c      	ite	eq
 8003e66:	600b      	streq	r3, [r1, #0]
 8003e68:	6053      	strne	r3, [r2, #4]
 8003e6a:	4630      	mov	r0, r6
 8003e6c:	f000 f85a 	bl	8003f24 <__malloc_unlock>
 8003e70:	f104 000b 	add.w	r0, r4, #11
 8003e74:	1d23      	adds	r3, r4, #4
 8003e76:	f020 0007 	bic.w	r0, r0, #7
 8003e7a:	1ac2      	subs	r2, r0, r3
 8003e7c:	d0cc      	beq.n	8003e18 <_malloc_r+0x20>
 8003e7e:	1a1b      	subs	r3, r3, r0
 8003e80:	50a3      	str	r3, [r4, r2]
 8003e82:	e7c9      	b.n	8003e18 <_malloc_r+0x20>
 8003e84:	4622      	mov	r2, r4
 8003e86:	6864      	ldr	r4, [r4, #4]
 8003e88:	e7cc      	b.n	8003e24 <_malloc_r+0x2c>
 8003e8a:	1cc4      	adds	r4, r0, #3
 8003e8c:	f024 0403 	bic.w	r4, r4, #3
 8003e90:	42a0      	cmp	r0, r4
 8003e92:	d0e3      	beq.n	8003e5c <_malloc_r+0x64>
 8003e94:	1a21      	subs	r1, r4, r0
 8003e96:	4630      	mov	r0, r6
 8003e98:	f000 f82e 	bl	8003ef8 <_sbrk_r>
 8003e9c:	3001      	adds	r0, #1
 8003e9e:	d1dd      	bne.n	8003e5c <_malloc_r+0x64>
 8003ea0:	e7cf      	b.n	8003e42 <_malloc_r+0x4a>
 8003ea2:	bf00      	nop
 8003ea4:	20000090 	.word	0x20000090
 8003ea8:	20000094 	.word	0x20000094

08003eac <_realloc_r>:
 8003eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eae:	4607      	mov	r7, r0
 8003eb0:	4614      	mov	r4, r2
 8003eb2:	460e      	mov	r6, r1
 8003eb4:	b921      	cbnz	r1, 8003ec0 <_realloc_r+0x14>
 8003eb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003eba:	4611      	mov	r1, r2
 8003ebc:	f7ff bf9c 	b.w	8003df8 <_malloc_r>
 8003ec0:	b922      	cbnz	r2, 8003ecc <_realloc_r+0x20>
 8003ec2:	f7ff ff49 	bl	8003d58 <_free_r>
 8003ec6:	4625      	mov	r5, r4
 8003ec8:	4628      	mov	r0, r5
 8003eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ecc:	f000 f830 	bl	8003f30 <_malloc_usable_size_r>
 8003ed0:	42a0      	cmp	r0, r4
 8003ed2:	d20f      	bcs.n	8003ef4 <_realloc_r+0x48>
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	4638      	mov	r0, r7
 8003ed8:	f7ff ff8e 	bl	8003df8 <_malloc_r>
 8003edc:	4605      	mov	r5, r0
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	d0f2      	beq.n	8003ec8 <_realloc_r+0x1c>
 8003ee2:	4631      	mov	r1, r6
 8003ee4:	4622      	mov	r2, r4
 8003ee6:	f7ff ff0f 	bl	8003d08 <memcpy>
 8003eea:	4631      	mov	r1, r6
 8003eec:	4638      	mov	r0, r7
 8003eee:	f7ff ff33 	bl	8003d58 <_free_r>
 8003ef2:	e7e9      	b.n	8003ec8 <_realloc_r+0x1c>
 8003ef4:	4635      	mov	r5, r6
 8003ef6:	e7e7      	b.n	8003ec8 <_realloc_r+0x1c>

08003ef8 <_sbrk_r>:
 8003ef8:	b538      	push	{r3, r4, r5, lr}
 8003efa:	4d06      	ldr	r5, [pc, #24]	; (8003f14 <_sbrk_r+0x1c>)
 8003efc:	2300      	movs	r3, #0
 8003efe:	4604      	mov	r4, r0
 8003f00:	4608      	mov	r0, r1
 8003f02:	602b      	str	r3, [r5, #0]
 8003f04:	f7fc ffc4 	bl	8000e90 <_sbrk>
 8003f08:	1c43      	adds	r3, r0, #1
 8003f0a:	d102      	bne.n	8003f12 <_sbrk_r+0x1a>
 8003f0c:	682b      	ldr	r3, [r5, #0]
 8003f0e:	b103      	cbz	r3, 8003f12 <_sbrk_r+0x1a>
 8003f10:	6023      	str	r3, [r4, #0]
 8003f12:	bd38      	pop	{r3, r4, r5, pc}
 8003f14:	20000414 	.word	0x20000414

08003f18 <__malloc_lock>:
 8003f18:	4801      	ldr	r0, [pc, #4]	; (8003f20 <__malloc_lock+0x8>)
 8003f1a:	f000 b811 	b.w	8003f40 <__retarget_lock_acquire_recursive>
 8003f1e:	bf00      	nop
 8003f20:	2000041c 	.word	0x2000041c

08003f24 <__malloc_unlock>:
 8003f24:	4801      	ldr	r0, [pc, #4]	; (8003f2c <__malloc_unlock+0x8>)
 8003f26:	f000 b80c 	b.w	8003f42 <__retarget_lock_release_recursive>
 8003f2a:	bf00      	nop
 8003f2c:	2000041c 	.word	0x2000041c

08003f30 <_malloc_usable_size_r>:
 8003f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f34:	1f18      	subs	r0, r3, #4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	bfbc      	itt	lt
 8003f3a:	580b      	ldrlt	r3, [r1, r0]
 8003f3c:	18c0      	addlt	r0, r0, r3
 8003f3e:	4770      	bx	lr

08003f40 <__retarget_lock_acquire_recursive>:
 8003f40:	4770      	bx	lr

08003f42 <__retarget_lock_release_recursive>:
 8003f42:	4770      	bx	lr

08003f44 <_init>:
 8003f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f46:	bf00      	nop
 8003f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4a:	bc08      	pop	{r3}
 8003f4c:	469e      	mov	lr, r3
 8003f4e:	4770      	bx	lr

08003f50 <_fini>:
 8003f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f52:	bf00      	nop
 8003f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f56:	bc08      	pop	{r3}
 8003f58:	469e      	mov	lr, r3
 8003f5a:	4770      	bx	lr
